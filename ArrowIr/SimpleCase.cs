// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Datalinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Switch-style case expression
public struct SimpleCase : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SimpleCase GetRootAsSimpleCase(ByteBuffer _bb) { return GetRootAsSimpleCase(_bb, new SimpleCase()); }
  public static SimpleCase GetRootAsSimpleCase(ByteBuffer _bb, SimpleCase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SimpleCase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The expression whose value will be matched
  public Datalinq.ArrowIr.Expression? Expression { get { int o = __p.__offset(4); return o != 0 ? (Datalinq.ArrowIr.Expression?)(new Datalinq.ArrowIr.Expression()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Matches for `expression`
  public Datalinq.ArrowIr.CaseFragment? Matches(int j) { int o = __p.__offset(6); return o != 0 ? (Datalinq.ArrowIr.CaseFragment?)(new Datalinq.ArrowIr.CaseFragment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MatchesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The default value if no cases match
  public Datalinq.ArrowIr.Expression? Else { get { int o = __p.__offset(8); return o != 0 ? (Datalinq.ArrowIr.Expression?)(new Datalinq.ArrowIr.Expression()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Datalinq.ArrowIr.SimpleCase> CreateSimpleCase(FlatBufferBuilder builder,
      Offset<Datalinq.ArrowIr.Expression> expressionOffset = default(Offset<Datalinq.ArrowIr.Expression>),
      VectorOffset matchesOffset = default(VectorOffset),
      Offset<Datalinq.ArrowIr.Expression> elseOffset = default(Offset<Datalinq.ArrowIr.Expression>)) {
    builder.StartTable(3);
    SimpleCase.AddElse(builder, elseOffset);
    SimpleCase.AddMatches(builder, matchesOffset);
    SimpleCase.AddExpression(builder, expressionOffset);
    return SimpleCase.EndSimpleCase(builder);
  }

  public static void StartSimpleCase(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddExpression(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Expression> expressionOffset) { builder.AddOffset(0, expressionOffset.Value, 0); }
  public static void AddMatches(FlatBufferBuilder builder, VectorOffset matchesOffset) { builder.AddOffset(1, matchesOffset.Value, 0); }
  public static VectorOffset CreateMatchesVector(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.CaseFragment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMatchesVectorBlock(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.CaseFragment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMatchesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddElse(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Expression> elseOffset) { builder.AddOffset(2, elseOffset.Value, 0); }
  public static Offset<Datalinq.ArrowIr.SimpleCase> EndSimpleCase(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // expression
    builder.Required(o, 6);  // matches
    builder.Required(o, 8);  // else
    return new Offset<Datalinq.ArrowIr.SimpleCase>(o);
  }
};


}
