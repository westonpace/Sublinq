// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SubLinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Literal : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Literal GetRootAsLiteral(ByteBuffer _bb) { return GetRootAsLiteral(_bb, new Literal()); }
  public static Literal GetRootAsLiteral(ByteBuffer _bb, Literal obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Literal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SubLinq.ArrowIr.LiteralImpl ImplType { get { int o = __p.__offset(4); return o != 0 ? (SubLinq.ArrowIr.LiteralImpl)__p.bb.Get(o + __p.bb_pos) : SubLinq.ArrowIr.LiteralImpl.NONE; } }
  /// Literal value data; for null literals do not include this field.
  public TTable? Impl<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public SubLinq.ArrowIr.BooleanLiteral ImplAsBooleanLiteral() { return Impl<SubLinq.ArrowIr.BooleanLiteral>().Value; }
  public SubLinq.ArrowIr.Int8Literal ImplAsInt8Literal() { return Impl<SubLinq.ArrowIr.Int8Literal>().Value; }
  public SubLinq.ArrowIr.Int16Literal ImplAsInt16Literal() { return Impl<SubLinq.ArrowIr.Int16Literal>().Value; }
  public SubLinq.ArrowIr.Int32Literal ImplAsInt32Literal() { return Impl<SubLinq.ArrowIr.Int32Literal>().Value; }
  public SubLinq.ArrowIr.Int64Literal ImplAsInt64Literal() { return Impl<SubLinq.ArrowIr.Int64Literal>().Value; }
  public SubLinq.ArrowIr.UInt8Literal ImplAsUInt8Literal() { return Impl<SubLinq.ArrowIr.UInt8Literal>().Value; }
  public SubLinq.ArrowIr.UInt16Literal ImplAsUInt16Literal() { return Impl<SubLinq.ArrowIr.UInt16Literal>().Value; }
  public SubLinq.ArrowIr.UInt32Literal ImplAsUInt32Literal() { return Impl<SubLinq.ArrowIr.UInt32Literal>().Value; }
  public SubLinq.ArrowIr.UInt64Literal ImplAsUInt64Literal() { return Impl<SubLinq.ArrowIr.UInt64Literal>().Value; }
  public SubLinq.ArrowIr.DateLiteral ImplAsDateLiteral() { return Impl<SubLinq.ArrowIr.DateLiteral>().Value; }
  public SubLinq.ArrowIr.TimeLiteral ImplAsTimeLiteral() { return Impl<SubLinq.ArrowIr.TimeLiteral>().Value; }
  public SubLinq.ArrowIr.TimestampLiteral ImplAsTimestampLiteral() { return Impl<SubLinq.ArrowIr.TimestampLiteral>().Value; }
  public SubLinq.ArrowIr.IntervalLiteral ImplAsIntervalLiteral() { return Impl<SubLinq.ArrowIr.IntervalLiteral>().Value; }
  public SubLinq.ArrowIr.DurationLiteral ImplAsDurationLiteral() { return Impl<SubLinq.ArrowIr.DurationLiteral>().Value; }
  public SubLinq.ArrowIr.DecimalLiteral ImplAsDecimalLiteral() { return Impl<SubLinq.ArrowIr.DecimalLiteral>().Value; }
  public SubLinq.ArrowIr.Float16Literal ImplAsFloat16Literal() { return Impl<SubLinq.ArrowIr.Float16Literal>().Value; }
  public SubLinq.ArrowIr.Float32Literal ImplAsFloat32Literal() { return Impl<SubLinq.ArrowIr.Float32Literal>().Value; }
  public SubLinq.ArrowIr.Float64Literal ImplAsFloat64Literal() { return Impl<SubLinq.ArrowIr.Float64Literal>().Value; }
  public SubLinq.ArrowIr.ListLiteral ImplAsListLiteral() { return Impl<SubLinq.ArrowIr.ListLiteral>().Value; }
  public SubLinq.ArrowIr.StructLiteral ImplAsStructLiteral() { return Impl<SubLinq.ArrowIr.StructLiteral>().Value; }
  public SubLinq.ArrowIr.MapLiteral ImplAsMapLiteral() { return Impl<SubLinq.ArrowIr.MapLiteral>().Value; }
  public SubLinq.ArrowIr.StringLiteral ImplAsStringLiteral() { return Impl<SubLinq.ArrowIr.StringLiteral>().Value; }
  public SubLinq.ArrowIr.BinaryLiteral ImplAsBinaryLiteral() { return Impl<SubLinq.ArrowIr.BinaryLiteral>().Value; }
  public SubLinq.ArrowIr.FixedSizeBinaryLiteral ImplAsFixedSizeBinaryLiteral() { return Impl<SubLinq.ArrowIr.FixedSizeBinaryLiteral>().Value; }
  /// Type of the literal value. This must match `impl`.
  public SubLinq.ArrowIr.Arrow.Field? Type { get { int o = __p.__offset(8); return o != 0 ? (SubLinq.ArrowIr.Arrow.Field?)(new SubLinq.ArrowIr.Arrow.Field()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<SubLinq.ArrowIr.Literal> CreateLiteral(FlatBufferBuilder builder,
      SubLinq.ArrowIr.LiteralImpl impl_type = SubLinq.ArrowIr.LiteralImpl.NONE,
      int implOffset = 0,
      Offset<SubLinq.ArrowIr.Arrow.Field> typeOffset = default(Offset<SubLinq.ArrowIr.Arrow.Field>)) {
    builder.StartTable(3);
    Literal.AddType(builder, typeOffset);
    Literal.AddImpl(builder, implOffset);
    Literal.AddImplType(builder, impl_type);
    return Literal.EndLiteral(builder);
  }

  public static void StartLiteral(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddImplType(FlatBufferBuilder builder, SubLinq.ArrowIr.LiteralImpl implType) { builder.AddByte(0, (byte)implType, 0); }
  public static void AddImpl(FlatBufferBuilder builder, int implOffset) { builder.AddOffset(1, implOffset, 0); }
  public static void AddType(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Arrow.Field> typeOffset) { builder.AddOffset(2, typeOffset.Value, 0); }
  public static Offset<SubLinq.ArrowIr.Literal> EndLiteral(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // type
    return new Offset<SubLinq.ArrowIr.Literal>(o);
  }
  public static void FinishLiteralBuffer(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Literal> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLiteralBuffer(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Literal> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
