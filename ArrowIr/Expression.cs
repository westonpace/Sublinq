// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Datalinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Expression types
///
/// Expressions have a concrete `impl` value, which is a specific operation.
///
/// This is a workaround for flatbuffers' lack of support for direct use of
/// union types.
public struct Expression : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Expression GetRootAsExpression(ByteBuffer _bb) { return GetRootAsExpression(_bb, new Expression()); }
  public static Expression GetRootAsExpression(ByteBuffer _bb, Expression obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Expression __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Datalinq.ArrowIr.ExpressionImpl ImplType { get { int o = __p.__offset(4); return o != 0 ? (Datalinq.ArrowIr.ExpressionImpl)__p.bb.Get(o + __p.bb_pos) : Datalinq.ArrowIr.ExpressionImpl.NONE; } }
  public TTable? Impl<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Datalinq.ArrowIr.Literal ImplAsLiteral() { return Impl<Datalinq.ArrowIr.Literal>().Value; }
  public Datalinq.ArrowIr.FieldRef ImplAsFieldRef() { return Impl<Datalinq.ArrowIr.FieldRef>().Value; }
  public Datalinq.ArrowIr.Call ImplAsCall() { return Impl<Datalinq.ArrowIr.Call>().Value; }
  public Datalinq.ArrowIr.ConditionalCase ImplAsConditionalCase() { return Impl<Datalinq.ArrowIr.ConditionalCase>().Value; }
  public Datalinq.ArrowIr.SimpleCase ImplAsSimpleCase() { return Impl<Datalinq.ArrowIr.SimpleCase>().Value; }
  public Datalinq.ArrowIr.WindowCall ImplAsWindowCall() { return Impl<Datalinq.ArrowIr.WindowCall>().Value; }
  public Datalinq.ArrowIr.Cast ImplAsCast() { return Impl<Datalinq.ArrowIr.Cast>().Value; }

  public static Offset<Datalinq.ArrowIr.Expression> CreateExpression(FlatBufferBuilder builder,
      Datalinq.ArrowIr.ExpressionImpl impl_type = Datalinq.ArrowIr.ExpressionImpl.NONE,
      int implOffset = 0) {
    builder.StartTable(2);
    Expression.AddImpl(builder, implOffset);
    Expression.AddImplType(builder, impl_type);
    return Expression.EndExpression(builder);
  }

  public static void StartExpression(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddImplType(FlatBufferBuilder builder, Datalinq.ArrowIr.ExpressionImpl implType) { builder.AddByte(0, (byte)implType, 0); }
  public static void AddImpl(FlatBufferBuilder builder, int implOffset) { builder.AddOffset(1, implOffset, 0); }
  public static Offset<Datalinq.ArrowIr.Expression> EndExpression(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // impl
    return new Offset<Datalinq.ArrowIr.Expression>(o);
  }
  public static void FinishExpressionBuffer(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Expression> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedExpressionBuffer(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Expression> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
