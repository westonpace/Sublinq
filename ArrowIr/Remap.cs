// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SubLinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// A data type indicating that a different mapping of columns
/// should occur in the output.
///
/// For example:
///
/// Given a query `SELECT b, a FROM t` where `t` has columns a, b, c
/// the mapping value for the projection would equal [1, 0].
public struct Remap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Remap GetRootAsRemap(ByteBuffer _bb) { return GetRootAsRemap(_bb, new Remap()); }
  public static Remap GetRootAsRemap(ByteBuffer _bb, Remap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Remap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SubLinq.ArrowIr.FieldIndex? Mapping(int j) { int o = __p.__offset(4); return o != 0 ? (SubLinq.ArrowIr.FieldIndex?)(new SubLinq.ArrowIr.FieldIndex()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MappingLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SubLinq.ArrowIr.Remap> CreateRemap(FlatBufferBuilder builder,
      VectorOffset mappingOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Remap.AddMapping(builder, mappingOffset);
    return Remap.EndRemap(builder);
  }

  public static void StartRemap(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMapping(FlatBufferBuilder builder, VectorOffset mappingOffset) { builder.AddOffset(0, mappingOffset.Value, 0); }
  public static VectorOffset CreateMappingVector(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.FieldIndex>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMappingVectorBlock(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.FieldIndex>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMappingVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SubLinq.ArrowIr.Remap> EndRemap(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // mapping
    return new Offset<SubLinq.ArrowIr.Remap>(o);
  }
};


}
