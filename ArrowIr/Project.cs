// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SubLinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Projection
public struct Project : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Project GetRootAsProject(ByteBuffer _bb) { return GetRootAsProject(_bb, new Project()); }
  public static Project GetRootAsProject(ByteBuffer _bb, Project obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Project __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Common options
  public SubLinq.ArrowIr.RelBase? Base { get { int o = __p.__offset(4); return o != 0 ? (SubLinq.ArrowIr.RelBase?)(new SubLinq.ArrowIr.RelBase()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Child relation
  public SubLinq.ArrowIr.Relation? Rel { get { int o = __p.__offset(6); return o != 0 ? (SubLinq.ArrowIr.Relation?)(new SubLinq.ArrowIr.Relation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Expressions which will be evaluated to produce to
  /// the rows of the project relation's output.
  public SubLinq.ArrowIr.Expression? Expressions(int j) { int o = __p.__offset(8); return o != 0 ? (SubLinq.ArrowIr.Expression?)(new SubLinq.ArrowIr.Expression()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ExpressionsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SubLinq.ArrowIr.Project> CreateProject(FlatBufferBuilder builder,
      Offset<SubLinq.ArrowIr.RelBase> baseOffset = default(Offset<SubLinq.ArrowIr.RelBase>),
      Offset<SubLinq.ArrowIr.Relation> relOffset = default(Offset<SubLinq.ArrowIr.Relation>),
      VectorOffset expressionsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Project.AddExpressions(builder, expressionsOffset);
    Project.AddRel(builder, relOffset);
    Project.AddBase(builder, baseOffset);
    return Project.EndProject(builder);
  }

  public static void StartProject(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddBase(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.RelBase> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddRel(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Relation> relOffset) { builder.AddOffset(1, relOffset.Value, 0); }
  public static void AddExpressions(FlatBufferBuilder builder, VectorOffset expressionsOffset) { builder.AddOffset(2, expressionsOffset.Value, 0); }
  public static VectorOffset CreateExpressionsVector(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Expression>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExpressionsVectorBlock(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Expression>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartExpressionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SubLinq.ArrowIr.Project> EndProject(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // base
    builder.Required(o, 6);  // rel
    builder.Required(o, 8);  // expressions
    return new Offset<SubLinq.ArrowIr.Project>(o);
  }
};


}
