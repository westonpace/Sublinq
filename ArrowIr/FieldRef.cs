// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Datalinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Access the data of a field
public struct FieldRef : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FieldRef GetRootAsFieldRef(ByteBuffer _bb) { return GetRootAsFieldRef(_bb, new FieldRef()); }
  public static FieldRef GetRootAsFieldRef(ByteBuffer _bb, FieldRef obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldRef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Datalinq.ArrowIr.Deref RefType { get { int o = __p.__offset(4); return o != 0 ? (Datalinq.ArrowIr.Deref)__p.bb.Get(o + __p.bb_pos) : Datalinq.ArrowIr.Deref.NONE; } }
  public TTable? Ref<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Datalinq.ArrowIr.MapKey RefAsMapKey() { return Ref<Datalinq.ArrowIr.MapKey>().Value; }
  public Datalinq.ArrowIr.StructField RefAsStructField() { return Ref<Datalinq.ArrowIr.StructField>().Value; }
  public Datalinq.ArrowIr.ArraySubscript RefAsArraySubscript() { return Ref<Datalinq.ArrowIr.ArraySubscript>().Value; }
  public Datalinq.ArrowIr.ArraySlice RefAsArraySlice() { return Ref<Datalinq.ArrowIr.ArraySlice>().Value; }
  public Datalinq.ArrowIr.FieldIndex RefAsFieldIndex() { return Ref<Datalinq.ArrowIr.FieldIndex>().Value; }
  /// For Expressions which might reference fields in multiple Relations,
  /// this index may be provided to indicate which Relation's fields
  /// `ref` points into. For example in the case of a join,
  /// 0 refers to the left relation and 1 to the right relation.
  public int RelationIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Datalinq.ArrowIr.FieldRef> CreateFieldRef(FlatBufferBuilder builder,
      Datalinq.ArrowIr.Deref ref_type = Datalinq.ArrowIr.Deref.NONE,
      int refOffset = 0,
      int relation_index = 0) {
    builder.StartTable(3);
    FieldRef.AddRelationIndex(builder, relation_index);
    FieldRef.AddRef(builder, refOffset);
    FieldRef.AddRefType(builder, ref_type);
    return FieldRef.EndFieldRef(builder);
  }

  public static void StartFieldRef(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddRefType(FlatBufferBuilder builder, Datalinq.ArrowIr.Deref refType) { builder.AddByte(0, (byte)refType, 0); }
  public static void AddRef(FlatBufferBuilder builder, int refOffset) { builder.AddOffset(1, refOffset, 0); }
  public static void AddRelationIndex(FlatBufferBuilder builder, int relationIndex) { builder.AddInt(2, relationIndex, 0); }
  public static Offset<Datalinq.ArrowIr.FieldRef> EndFieldRef(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // ref
    return new Offset<Datalinq.ArrowIr.FieldRef>(o);
  }
};


}
