// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SubLinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Access a value for a given map key
public struct MapKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MapKey GetRootAsMapKey(ByteBuffer _bb) { return GetRootAsMapKey(_bb, new MapKey()); }
  public static MapKey GetRootAsMapKey(ByteBuffer _bb, MapKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Any expression can be a map key.
  public SubLinq.ArrowIr.Expression? Key { get { int o = __p.__offset(4); return o != 0 ? (SubLinq.ArrowIr.Expression?)(new SubLinq.ArrowIr.Expression()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<SubLinq.ArrowIr.MapKey> CreateMapKey(FlatBufferBuilder builder,
      Offset<SubLinq.ArrowIr.Expression> keyOffset = default(Offset<SubLinq.ArrowIr.Expression>)) {
    builder.StartTable(1);
    MapKey.AddKey(builder, keyOffset);
    return MapKey.EndMapKey(builder);
  }

  public static void StartMapKey(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddKey(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Expression> keyOffset) { builder.AddOffset(0, keyOffset.Value, 0); }
  public static Offset<SubLinq.ArrowIr.MapKey> EndMapKey(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // key
    return new Offset<SubLinq.ArrowIr.MapKey>(o);
  }
};


}
