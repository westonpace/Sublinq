// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SubLinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// An external source of tabular data
public struct Source : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Source GetRootAsSource(ByteBuffer _bb) { return GetRootAsSource(_bb, new Source()); }
  public static Source GetRootAsSource(ByteBuffer _bb, Source obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Source __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SubLinq.ArrowIr.RelBase? Base { get { int o = __p.__offset(4); return o != 0 ? (SubLinq.ArrowIr.RelBase?)(new SubLinq.ArrowIr.RelBase()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public SubLinq.ArrowIr.Arrow.Schema? Schema { get { int o = __p.__offset(8); return o != 0 ? (SubLinq.ArrowIr.Arrow.Schema?)(new SubLinq.ArrowIr.Arrow.Schema()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<SubLinq.ArrowIr.Source> CreateSource(FlatBufferBuilder builder,
      Offset<SubLinq.ArrowIr.RelBase> baseOffset = default(Offset<SubLinq.ArrowIr.RelBase>),
      StringOffset nameOffset = default(StringOffset),
      Offset<SubLinq.ArrowIr.Arrow.Schema> schemaOffset = default(Offset<SubLinq.ArrowIr.Arrow.Schema>)) {
    builder.StartTable(3);
    Source.AddSchema(builder, schemaOffset);
    Source.AddName(builder, nameOffset);
    Source.AddBase(builder, baseOffset);
    return Source.EndSource(builder);
  }

  public static void StartSource(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddBase(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.RelBase> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSchema(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Arrow.Schema> schemaOffset) { builder.AddOffset(2, schemaOffset.Value, 0); }
  public static Offset<SubLinq.ArrowIr.Source> EndSource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // base
    builder.Required(o, 6);  // name
    builder.Required(o, 8);  // schema
    return new Offset<SubLinq.ArrowIr.Source>(o);
  }
};


}
