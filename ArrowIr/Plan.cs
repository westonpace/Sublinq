// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Datalinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// A specification of a query.
public struct Plan : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Plan GetRootAsPlan(ByteBuffer _bb) { return GetRootAsPlan(_bb, new Plan()); }
  public static Plan GetRootAsPlan(ByteBuffer _bb, Plan obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Plan __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// One or more output relations.
  public Datalinq.ArrowIr.Relation? Sinks(int j) { int o = __p.__offset(4); return o != 0 ? (Datalinq.ArrowIr.Relation?)(new Datalinq.ArrowIr.Relation()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SinksLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Datalinq.ArrowIr.Plan> CreatePlan(FlatBufferBuilder builder,
      VectorOffset sinksOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Plan.AddSinks(builder, sinksOffset);
    return Plan.EndPlan(builder);
  }

  public static void StartPlan(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddSinks(FlatBufferBuilder builder, VectorOffset sinksOffset) { builder.AddOffset(0, sinksOffset.Value, 0); }
  public static VectorOffset CreateSinksVector(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Relation>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSinksVectorBlock(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Relation>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSinksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Datalinq.ArrowIr.Plan> EndPlan(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // sinks
    return new Offset<Datalinq.ArrowIr.Plan>(o);
  }
  public static void FinishPlanBuffer(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Plan> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPlanBuffer(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Plan> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
