// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Datalinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Conditional case statement expression
public struct ConditionalCase : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ConditionalCase GetRootAsConditionalCase(ByteBuffer _bb) { return GetRootAsConditionalCase(_bb, new ConditionalCase()); }
  public static ConditionalCase GetRootAsConditionalCase(ByteBuffer _bb, ConditionalCase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionalCase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// List of conditions to evaluate
  public Datalinq.ArrowIr.CaseFragment? Conditions(int j) { int o = __p.__offset(4); return o != 0 ? (Datalinq.ArrowIr.CaseFragment?)(new Datalinq.ArrowIr.CaseFragment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConditionsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The default value if no cases match. This is typically NULL in SQL
  /// implementations.
  ///
  /// Defaulting to NULL is a frontend choice, so producers must specify NULL
  /// if that's their desired behavior.
  public Datalinq.ArrowIr.Expression? Else { get { int o = __p.__offset(6); return o != 0 ? (Datalinq.ArrowIr.Expression?)(new Datalinq.ArrowIr.Expression()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Datalinq.ArrowIr.ConditionalCase> CreateConditionalCase(FlatBufferBuilder builder,
      VectorOffset conditionsOffset = default(VectorOffset),
      Offset<Datalinq.ArrowIr.Expression> elseOffset = default(Offset<Datalinq.ArrowIr.Expression>)) {
    builder.StartTable(2);
    ConditionalCase.AddElse(builder, elseOffset);
    ConditionalCase.AddConditions(builder, conditionsOffset);
    return ConditionalCase.EndConditionalCase(builder);
  }

  public static void StartConditionalCase(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddConditions(FlatBufferBuilder builder, VectorOffset conditionsOffset) { builder.AddOffset(0, conditionsOffset.Value, 0); }
  public static VectorOffset CreateConditionsVector(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.CaseFragment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConditionsVectorBlock(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.CaseFragment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConditionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddElse(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Expression> elseOffset) { builder.AddOffset(1, elseOffset.Value, 0); }
  public static Offset<Datalinq.ArrowIr.ConditionalCase> EndConditionalCase(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // conditions
    builder.Required(o, 6);  // else
    return new Offset<Datalinq.ArrowIr.ConditionalCase>(o);
  }
};


}
