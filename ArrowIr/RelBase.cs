// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SubLinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Fields common to every relational operator
public struct RelBase : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RelBase GetRootAsRelBase(ByteBuffer _bb) { return GetRootAsRelBase(_bb, new RelBase()); }
  public static RelBase GetRootAsRelBase(ByteBuffer _bb, RelBase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RelBase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SubLinq.ArrowIr.Emit OutputMappingType { get { int o = __p.__offset(4); return o != 0 ? (SubLinq.ArrowIr.Emit)__p.bb.Get(o + __p.bb_pos) : SubLinq.ArrowIr.Emit.NONE; } }
  /// Output remapping of ordinal columns for a given operation
  public TTable? OutputMapping<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public SubLinq.ArrowIr.Remap OutputMappingAsRemap() { return OutputMapping<SubLinq.ArrowIr.Remap>().Value; }
  public SubLinq.ArrowIr.PassThrough OutputMappingAsPassThrough() { return OutputMapping<SubLinq.ArrowIr.PassThrough>().Value; }

  public static Offset<SubLinq.ArrowIr.RelBase> CreateRelBase(FlatBufferBuilder builder,
      SubLinq.ArrowIr.Emit output_mapping_type = SubLinq.ArrowIr.Emit.NONE,
      int output_mappingOffset = 0) {
    builder.StartTable(2);
    RelBase.AddOutputMapping(builder, output_mappingOffset);
    RelBase.AddOutputMappingType(builder, output_mapping_type);
    return RelBase.EndRelBase(builder);
  }

  public static void StartRelBase(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddOutputMappingType(FlatBufferBuilder builder, SubLinq.ArrowIr.Emit outputMappingType) { builder.AddByte(0, (byte)outputMappingType, 0); }
  public static void AddOutputMapping(FlatBufferBuilder builder, int outputMappingOffset) { builder.AddOffset(1, outputMappingOffset, 0); }
  public static Offset<SubLinq.ArrowIr.RelBase> EndRelBase(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // output_mapping
    return new Offset<SubLinq.ArrowIr.RelBase>(o);
  }
};


}
