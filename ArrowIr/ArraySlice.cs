// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Datalinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Zero-based range of elements in an array
public struct ArraySlice : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ArraySlice GetRootAsArraySlice(ByteBuffer _bb) { return GetRootAsArraySlice(_bb, new ArraySlice()); }
  public static ArraySlice GetRootAsArraySlice(ByteBuffer _bb, ArraySlice obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ArraySlice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The start of an array slice, inclusive
  public uint StartInclusive { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// The end of an array slice, exclusive
  public uint EndExclusive { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Datalinq.ArrowIr.ArraySlice> CreateArraySlice(FlatBufferBuilder builder,
      uint start_inclusive = 0,
      uint end_exclusive = 0) {
    builder.StartTable(2);
    ArraySlice.AddEndExclusive(builder, end_exclusive);
    ArraySlice.AddStartInclusive(builder, start_inclusive);
    return ArraySlice.EndArraySlice(builder);
  }

  public static void StartArraySlice(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddStartInclusive(FlatBufferBuilder builder, uint startInclusive) { builder.AddUint(0, startInclusive, 0); }
  public static void AddEndExclusive(FlatBufferBuilder builder, uint endExclusive) { builder.AddUint(1, endExclusive, 0); }
  public static Offset<Datalinq.ArrowIr.ArraySlice> EndArraySlice(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Datalinq.ArrowIr.ArraySlice>(o);
  }
};


}
