// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Datalinq.ArrowIr.Arrow
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// ----------------------------------------------------------------------
/// A field represents a named column in a record / row batch or child of a
/// nested type.
public struct Field : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Field GetRootAsField(ByteBuffer _bb) { return GetRootAsField(_bb, new Field()); }
  public static Field GetRootAsField(ByteBuffer _bb, Field obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Field __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Name is not required, in i.e. a List
  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  /// Whether or not this field can contain nulls. Should be true in general.
  public bool Nullable { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Datalinq.ArrowIr.Arrow.Type TypeType { get { int o = __p.__offset(8); return o != 0 ? (Datalinq.ArrowIr.Arrow.Type)__p.bb.Get(o + __p.bb_pos) : Datalinq.ArrowIr.Arrow.Type.NONE; } }
  /// This is the type of the decoded value if the field is dictionary encoded.
  public TTable? Type<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Datalinq.ArrowIr.Arrow.Null TypeAsNull() { return Type<Datalinq.ArrowIr.Arrow.Null>().Value; }
  public Datalinq.ArrowIr.Arrow.Int TypeAsInt() { return Type<Datalinq.ArrowIr.Arrow.Int>().Value; }
  public Datalinq.ArrowIr.Arrow.FloatingPoint TypeAsFloatingPoint() { return Type<Datalinq.ArrowIr.Arrow.FloatingPoint>().Value; }
  public Datalinq.ArrowIr.Arrow.Binary TypeAsBinary() { return Type<Datalinq.ArrowIr.Arrow.Binary>().Value; }
  public Datalinq.ArrowIr.Arrow.Utf8 TypeAsUtf8() { return Type<Datalinq.ArrowIr.Arrow.Utf8>().Value; }
  public Datalinq.ArrowIr.Arrow.Bool TypeAsBool() { return Type<Datalinq.ArrowIr.Arrow.Bool>().Value; }
  public Datalinq.ArrowIr.Arrow.Decimal TypeAsDecimal() { return Type<Datalinq.ArrowIr.Arrow.Decimal>().Value; }
  public Datalinq.ArrowIr.Arrow.Date TypeAsDate() { return Type<Datalinq.ArrowIr.Arrow.Date>().Value; }
  public Datalinq.ArrowIr.Arrow.Time TypeAsTime() { return Type<Datalinq.ArrowIr.Arrow.Time>().Value; }
  public Datalinq.ArrowIr.Arrow.Timestamp TypeAsTimestamp() { return Type<Datalinq.ArrowIr.Arrow.Timestamp>().Value; }
  public Datalinq.ArrowIr.Arrow.Interval TypeAsInterval() { return Type<Datalinq.ArrowIr.Arrow.Interval>().Value; }
  public Datalinq.ArrowIr.Arrow.List TypeAsList() { return Type<Datalinq.ArrowIr.Arrow.List>().Value; }
  public Datalinq.ArrowIr.Arrow.Struct_ TypeAsStruct_() { return Type<Datalinq.ArrowIr.Arrow.Struct_>().Value; }
  public Datalinq.ArrowIr.Arrow.Union TypeAsUnion() { return Type<Datalinq.ArrowIr.Arrow.Union>().Value; }
  public Datalinq.ArrowIr.Arrow.FixedSizeBinary TypeAsFixedSizeBinary() { return Type<Datalinq.ArrowIr.Arrow.FixedSizeBinary>().Value; }
  public Datalinq.ArrowIr.Arrow.FixedSizeList TypeAsFixedSizeList() { return Type<Datalinq.ArrowIr.Arrow.FixedSizeList>().Value; }
  public Datalinq.ArrowIr.Arrow.Map TypeAsMap() { return Type<Datalinq.ArrowIr.Arrow.Map>().Value; }
  public Datalinq.ArrowIr.Arrow.Duration TypeAsDuration() { return Type<Datalinq.ArrowIr.Arrow.Duration>().Value; }
  public Datalinq.ArrowIr.Arrow.LargeBinary TypeAsLargeBinary() { return Type<Datalinq.ArrowIr.Arrow.LargeBinary>().Value; }
  public Datalinq.ArrowIr.Arrow.LargeUtf8 TypeAsLargeUtf8() { return Type<Datalinq.ArrowIr.Arrow.LargeUtf8>().Value; }
  public Datalinq.ArrowIr.Arrow.LargeList TypeAsLargeList() { return Type<Datalinq.ArrowIr.Arrow.LargeList>().Value; }
  /// Present only if the field is dictionary encoded.
  public Datalinq.ArrowIr.Arrow.DictionaryEncoding? Dictionary { get { int o = __p.__offset(12); return o != 0 ? (Datalinq.ArrowIr.Arrow.DictionaryEncoding?)(new Datalinq.ArrowIr.Arrow.DictionaryEncoding()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// children apply only to nested data types like Struct, List and Union. For
  /// primitive types children will have length 0.
  public Datalinq.ArrowIr.Arrow.Field? Children(int j) { int o = __p.__offset(14); return o != 0 ? (Datalinq.ArrowIr.Arrow.Field?)(new Datalinq.ArrowIr.Arrow.Field()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// User-defined metadata
  public Datalinq.ArrowIr.Arrow.KeyValue? CustomMetadata(int j) { int o = __p.__offset(16); return o != 0 ? (Datalinq.ArrowIr.Arrow.KeyValue?)(new Datalinq.ArrowIr.Arrow.KeyValue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CustomMetadataLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Datalinq.ArrowIr.Arrow.Field> CreateField(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool nullable = false,
      Datalinq.ArrowIr.Arrow.Type type_type = Datalinq.ArrowIr.Arrow.Type.NONE,
      int typeOffset = 0,
      Offset<Datalinq.ArrowIr.Arrow.DictionaryEncoding> dictionaryOffset = default(Offset<Datalinq.ArrowIr.Arrow.DictionaryEncoding>),
      VectorOffset childrenOffset = default(VectorOffset),
      VectorOffset custom_metadataOffset = default(VectorOffset)) {
    builder.StartTable(7);
    Field.AddCustomMetadata(builder, custom_metadataOffset);
    Field.AddChildren(builder, childrenOffset);
    Field.AddDictionary(builder, dictionaryOffset);
    Field.AddType(builder, typeOffset);
    Field.AddName(builder, nameOffset);
    Field.AddTypeType(builder, type_type);
    Field.AddNullable(builder, nullable);
    return Field.EndField(builder);
  }

  public static void StartField(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddNullable(FlatBufferBuilder builder, bool nullable) { builder.AddBool(1, nullable, false); }
  public static void AddTypeType(FlatBufferBuilder builder, Datalinq.ArrowIr.Arrow.Type typeType) { builder.AddByte(2, (byte)typeType, 0); }
  public static void AddType(FlatBufferBuilder builder, int typeOffset) { builder.AddOffset(3, typeOffset, 0); }
  public static void AddDictionary(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Arrow.DictionaryEncoding> dictionaryOffset) { builder.AddOffset(4, dictionaryOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(5, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Arrow.Field>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Arrow.Field>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCustomMetadata(FlatBufferBuilder builder, VectorOffset customMetadataOffset) { builder.AddOffset(6, customMetadataOffset.Value, 0); }
  public static VectorOffset CreateCustomMetadataVector(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Arrow.KeyValue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Arrow.KeyValue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomMetadataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Datalinq.ArrowIr.Arrow.Field> EndField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Datalinq.ArrowIr.Arrow.Field>(o);
  }
};


}
