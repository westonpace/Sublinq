// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Datalinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Filter operation
public struct Filter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Filter GetRootAsFilter(ByteBuffer _bb) { return GetRootAsFilter(_bb, new Filter()); }
  public static Filter GetRootAsFilter(ByteBuffer _bb, Filter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Filter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Common options
  public Datalinq.ArrowIr.RelBase? Base { get { int o = __p.__offset(4); return o != 0 ? (Datalinq.ArrowIr.RelBase?)(new Datalinq.ArrowIr.RelBase()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Child relation
  public Datalinq.ArrowIr.Relation? Rel { get { int o = __p.__offset(6); return o != 0 ? (Datalinq.ArrowIr.Relation?)(new Datalinq.ArrowIr.Relation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// The expression which will be evaluated against input rows
  /// to determine whether they should be excluded from the
  /// filter relation's output.
  public Datalinq.ArrowIr.Expression? Predicate { get { int o = __p.__offset(8); return o != 0 ? (Datalinq.ArrowIr.Expression?)(new Datalinq.ArrowIr.Expression()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Datalinq.ArrowIr.Filter> CreateFilter(FlatBufferBuilder builder,
      Offset<Datalinq.ArrowIr.RelBase> baseOffset = default(Offset<Datalinq.ArrowIr.RelBase>),
      Offset<Datalinq.ArrowIr.Relation> relOffset = default(Offset<Datalinq.ArrowIr.Relation>),
      Offset<Datalinq.ArrowIr.Expression> predicateOffset = default(Offset<Datalinq.ArrowIr.Expression>)) {
    builder.StartTable(3);
    Filter.AddPredicate(builder, predicateOffset);
    Filter.AddRel(builder, relOffset);
    Filter.AddBase(builder, baseOffset);
    return Filter.EndFilter(builder);
  }

  public static void StartFilter(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddBase(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.RelBase> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddRel(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Relation> relOffset) { builder.AddOffset(1, relOffset.Value, 0); }
  public static void AddPredicate(FlatBufferBuilder builder, Offset<Datalinq.ArrowIr.Expression> predicateOffset) { builder.AddOffset(2, predicateOffset.Value, 0); }
  public static Offset<Datalinq.ArrowIr.Filter> EndFilter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // base
    builder.Required(o, 6);  // rel
    builder.Required(o, 8);  // predicate
    return new Offset<Datalinq.ArrowIr.Filter>(o);
  }
};


}
