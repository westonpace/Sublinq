// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SubLinq.ArrowIr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// An expression representing a window function call.
public struct WindowCall : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static WindowCall GetRootAsWindowCall(ByteBuffer _bb) { return GetRootAsWindowCall(_bb, new WindowCall()); }
  public static WindowCall GetRootAsWindowCall(ByteBuffer _bb, WindowCall obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WindowCall __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The expression to operate over
  public SubLinq.ArrowIr.Expression? Expression { get { int o = __p.__offset(4); return o != 0 ? (SubLinq.ArrowIr.Expression?)(new SubLinq.ArrowIr.Expression()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// The kind of window frame
  public SubLinq.ArrowIr.Frame Kind { get { int o = __p.__offset(6); return o != 0 ? (SubLinq.ArrowIr.Frame)__p.bb.Get(o + __p.bb_pos) : SubLinq.ArrowIr.Frame.Rows; } }
  /// Partition keys
  public SubLinq.ArrowIr.Expression? Partitions(int j) { int o = __p.__offset(8); return o != 0 ? (SubLinq.ArrowIr.Expression?)(new SubLinq.ArrowIr.Expression()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PartitionsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Sort keys
  public SubLinq.ArrowIr.SortKey? Orderings(int j) { int o = __p.__offset(10); return o != 0 ? (SubLinq.ArrowIr.SortKey?)(new SubLinq.ArrowIr.SortKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OrderingsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public SubLinq.ArrowIr.Bound LowerBoundType { get { int o = __p.__offset(12); return o != 0 ? (SubLinq.ArrowIr.Bound)__p.bb.Get(o + __p.bb_pos) : SubLinq.ArrowIr.Bound.NONE; } }
  /// Lower window bound
  public TTable? LowerBound<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(14); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public SubLinq.ArrowIr.Preceding LowerBoundAsPreceding() { return LowerBound<SubLinq.ArrowIr.Preceding>().Value; }
  public SubLinq.ArrowIr.Following LowerBoundAsFollowing() { return LowerBound<SubLinq.ArrowIr.Following>().Value; }
  public SubLinq.ArrowIr.CurrentRow LowerBoundAsCurrentRow() { return LowerBound<SubLinq.ArrowIr.CurrentRow>().Value; }
  public SubLinq.ArrowIr.Bound UpperBoundType { get { int o = __p.__offset(16); return o != 0 ? (SubLinq.ArrowIr.Bound)__p.bb.Get(o + __p.bb_pos) : SubLinq.ArrowIr.Bound.NONE; } }
  /// Upper window bound
  public TTable? UpperBound<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(18); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public SubLinq.ArrowIr.Preceding UpperBoundAsPreceding() { return UpperBound<SubLinq.ArrowIr.Preceding>().Value; }
  public SubLinq.ArrowIr.Following UpperBoundAsFollowing() { return UpperBound<SubLinq.ArrowIr.Following>().Value; }
  public SubLinq.ArrowIr.CurrentRow UpperBoundAsCurrentRow() { return UpperBound<SubLinq.ArrowIr.CurrentRow>().Value; }

  public static Offset<SubLinq.ArrowIr.WindowCall> CreateWindowCall(FlatBufferBuilder builder,
      Offset<SubLinq.ArrowIr.Expression> expressionOffset = default(Offset<SubLinq.ArrowIr.Expression>),
      SubLinq.ArrowIr.Frame kind = SubLinq.ArrowIr.Frame.Rows,
      VectorOffset partitionsOffset = default(VectorOffset),
      VectorOffset orderingsOffset = default(VectorOffset),
      SubLinq.ArrowIr.Bound lower_bound_type = SubLinq.ArrowIr.Bound.NONE,
      int lower_boundOffset = 0,
      SubLinq.ArrowIr.Bound upper_bound_type = SubLinq.ArrowIr.Bound.NONE,
      int upper_boundOffset = 0) {
    builder.StartTable(8);
    WindowCall.AddUpperBound(builder, upper_boundOffset);
    WindowCall.AddLowerBound(builder, lower_boundOffset);
    WindowCall.AddOrderings(builder, orderingsOffset);
    WindowCall.AddPartitions(builder, partitionsOffset);
    WindowCall.AddExpression(builder, expressionOffset);
    WindowCall.AddUpperBoundType(builder, upper_bound_type);
    WindowCall.AddLowerBoundType(builder, lower_bound_type);
    WindowCall.AddKind(builder, kind);
    return WindowCall.EndWindowCall(builder);
  }

  public static void StartWindowCall(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddExpression(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Expression> expressionOffset) { builder.AddOffset(0, expressionOffset.Value, 0); }
  public static void AddKind(FlatBufferBuilder builder, SubLinq.ArrowIr.Frame kind) { builder.AddByte(1, (byte)kind, 0); }
  public static void AddPartitions(FlatBufferBuilder builder, VectorOffset partitionsOffset) { builder.AddOffset(2, partitionsOffset.Value, 0); }
  public static VectorOffset CreatePartitionsVector(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Expression>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePartitionsVectorBlock(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.Expression>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartitionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOrderings(FlatBufferBuilder builder, VectorOffset orderingsOffset) { builder.AddOffset(3, orderingsOffset.Value, 0); }
  public static VectorOffset CreateOrderingsVector(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.SortKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOrderingsVectorBlock(FlatBufferBuilder builder, Offset<SubLinq.ArrowIr.SortKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOrderingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLowerBoundType(FlatBufferBuilder builder, SubLinq.ArrowIr.Bound lowerBoundType) { builder.AddByte(4, (byte)lowerBoundType, 0); }
  public static void AddLowerBound(FlatBufferBuilder builder, int lowerBoundOffset) { builder.AddOffset(5, lowerBoundOffset, 0); }
  public static void AddUpperBoundType(FlatBufferBuilder builder, SubLinq.ArrowIr.Bound upperBoundType) { builder.AddByte(6, (byte)upperBoundType, 0); }
  public static void AddUpperBound(FlatBufferBuilder builder, int upperBoundOffset) { builder.AddOffset(7, upperBoundOffset, 0); }
  public static Offset<SubLinq.ArrowIr.WindowCall> EndWindowCall(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // expression
    builder.Required(o, 8);  // partitions
    builder.Required(o, 10);  // orderings
    builder.Required(o, 14);  // lower_bound
    builder.Required(o, 18);  // upper_bound
    return new Offset<SubLinq.ArrowIr.WindowCall>(o);
  }
};


}
