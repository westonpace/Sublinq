// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: expression.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Substrait.Protobuf {

  /// <summary>Holder for reflection information generated from expression.proto</summary>
  public static partial class ExpressionReflection {

    #region Descriptor
    /// <summary>File descriptor for expression.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExpressionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBleHByZXNzaW9uLnByb3RvEgxpby5zdWJzdHJhaXQaCnR5cGUucHJvdG8a",
            "D3NlbGVjdGlvbi5wcm90bxoQZXh0ZW5zaW9ucy5wcm90byKvIQoKRXhwcmVz",
            "c2lvbhIzCgdsaXRlcmFsGAEgASgLMiAuaW8uc3Vic3RyYWl0LkV4cHJlc3Np",
            "b24uTGl0ZXJhbEgAEjEKCXNlbGVjdGlvbhgCIAEoCzIcLmlvLnN1YnN0cmFp",
            "dC5GaWVsZFJlZmVyZW5jZUgAEkIKD3NjYWxhcl9mdW5jdGlvbhgDIAEoCzIn",
            "LmlvLnN1YnN0cmFpdC5FeHByZXNzaW9uLlNjYWxhckZ1bmN0aW9uSAASQgoP",
            "d2luZG93X2Z1bmN0aW9uGAUgASgLMicuaW8uc3Vic3RyYWl0LkV4cHJlc3Np",
            "b24uV2luZG93RnVuY3Rpb25IABIyCgdpZl90aGVuGAYgASgLMh8uaW8uc3Vi",
            "c3RyYWl0LkV4cHJlc3Npb24uSWZUaGVuSAASRgoRc3dpdGNoX2V4cHJlc3Np",
            "b24YByABKAsyKS5pby5zdWJzdHJhaXQuRXhwcmVzc2lvbi5Td2l0Y2hFeHBy",
            "ZXNzaW9uSAASQwoQc2luZ3VsYXJfb3JfbGlzdBgIIAEoCzInLmlvLnN1YnN0",
            "cmFpdC5FeHByZXNzaW9uLlNpbmd1bGFyT3JMaXN0SAASPQoNbXVsdGlfb3Jf",
            "bGlzdBgJIAEoCzIkLmlvLnN1YnN0cmFpdC5FeHByZXNzaW9uLk11bHRpT3JM",
            "aXN0SAAagAgKB0xpdGVyYWwSEQoHYm9vbGVhbhgBIAEoCEgAEgwKAmk4GAIg",
            "ASgFSAASDQoDaTE2GAMgASgFSAASDQoDaTMyGAUgASgFSAASDQoDaTY0GAcg",
            "ASgDSAASDgoEZnAzMhgKIAEoAkgAEg4KBGZwNjQYCyABKAFIABIQCgZzdHJp",
            "bmcYDCABKAlIABIQCgZiaW5hcnkYDSABKAxIABITCgl0aW1lc3RhbXAYDiAB",
            "KAZIABIOCgRkYXRlGBAgASgHSAASDgoEdGltZRgRIAEoBEgAElYKFmludGVy",
            "dmFsX3llYXJfdG9fbW9udGgYEyABKAsyNC5pby5zdWJzdHJhaXQuRXhwcmVz",
            "c2lvbi5MaXRlcmFsLkludGVydmFsWWVhclRvTW9udGhIABJWChZpbnRlcnZh",
            "bF9kYXlfdG9fc2Vjb25kGBQgASgLMjQuaW8uc3Vic3RyYWl0LkV4cHJlc3Np",
            "b24uTGl0ZXJhbC5JbnRlcnZhbERheVRvU2Vjb25kSAASFAoKZml4ZWRfY2hh",
            "chgVIAEoCUgAEhIKCHZhcl9jaGFyGBYgASgJSAASFgoMZml4ZWRfYmluYXJ5",
            "GBcgASgMSAASEQoHZGVjaW1hbBgYIAEoDEgAEjkKBnN0cnVjdBgZIAEoCzIn",
            "LmlvLnN1YnN0cmFpdC5FeHByZXNzaW9uLkxpdGVyYWwuU3RydWN0SAASMwoD",
            "bWFwGBogASgLMiQuaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24uTGl0ZXJhbC5N",
            "YXBIABIWCgx0aW1lc3RhbXBfdHoYGyABKAZIABIOCgR1dWlkGBwgASgMSAAS",
            "IgoEbnVsbBgdIAEoCzISLmlvLnN1YnN0cmFpdC5UeXBlSAAatAEKA01hcBJB",
            "CgprZXlfdmFsdWVzGAEgAygLMi0uaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24u",
            "TGl0ZXJhbC5NYXAuS2V5VmFsdWUaagoIS2V5VmFsdWUSLQoDa2V5GAEgASgL",
            "MiAuaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24uTGl0ZXJhbBIvCgV2YWx1ZRgC",
            "IAEoCzIgLmlvLnN1YnN0cmFpdC5FeHByZXNzaW9uLkxpdGVyYWwaNAoTSW50",
            "ZXJ2YWxZZWFyVG9Nb250aBINCgV5ZWFycxgBIAEoBRIOCgZtb250aHMYAiAB",
            "KAUaNAoTSW50ZXJ2YWxEYXlUb1NlY29uZBIMCgRkYXlzGAEgASgFEg8KB3Nl",
            "Y29uZHMYAiABKAUaOgoGU3RydWN0EjAKBmZpZWxkcxgBIAMoCzIgLmlvLnN1",
            "YnN0cmFpdC5FeHByZXNzaW9uLkxpdGVyYWxCDgoMbGl0ZXJhbF90eXBlGpIB",
            "Cg5TY2FsYXJGdW5jdGlvbhIvCgJpZBgBIAEoCzIjLmlvLnN1YnN0cmFpdC5F",
            "eHRlbnNpb25zLkZ1bmN0aW9uSWQSJgoEYXJncxgCIAMoCzIYLmlvLnN1YnN0",
            "cmFpdC5FeHByZXNzaW9uEicKC291dHB1dF90eXBlGAMgASgLMhIuaW8uc3Vi",
            "c3RyYWl0LlR5cGUaggIKEUFnZ3JlZ2F0ZUZ1bmN0aW9uEi8KAmlkGAEgASgL",
            "MiMuaW8uc3Vic3RyYWl0LkV4dGVuc2lvbnMuRnVuY3Rpb25JZBImCgRhcmdz",
            "GAIgAygLMhguaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24SMQoFc29ydHMYAyAD",
            "KAsyIi5pby5zdWJzdHJhaXQuRXhwcmVzc2lvbi5Tb3J0RmllbGQSOAoFcGhh",
            "c2UYBCABKA4yKS5pby5zdWJzdHJhaXQuRXhwcmVzc2lvbi5BZ2dyZWdhdGlv",
            "blBoYXNlEicKC291dHB1dF90eXBlGAUgASgLMhIuaW8uc3Vic3RyYWl0LlR5",
            "cGUa1AUKDldpbmRvd0Z1bmN0aW9uEi8KAmlkGAEgASgLMiMuaW8uc3Vic3Ry",
            "YWl0LkV4dGVuc2lvbnMuRnVuY3Rpb25JZBIsCgpwYXJ0aXRpb25zGAIgAygL",
            "MhguaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24SMQoFc29ydHMYAyADKAsyIi5p",
            "by5zdWJzdHJhaXQuRXhwcmVzc2lvbi5Tb3J0RmllbGQSQgoLdXBwZXJfYm91",
            "bmQYBCABKAsyLS5pby5zdWJzdHJhaXQuRXhwcmVzc2lvbi5XaW5kb3dGdW5j",
            "dGlvbi5Cb3VuZBJCCgtsb3dlcl9ib3VuZBgFIAEoCzItLmlvLnN1YnN0cmFp",
            "dC5FeHByZXNzaW9uLldpbmRvd0Z1bmN0aW9uLkJvdW5kEjgKBXBoYXNlGAYg",
            "ASgOMikuaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24uQWdncmVnYXRpb25QaGFz",
            "ZRInCgtvdXRwdXRfdHlwZRgHIAEoCzISLmlvLnN1YnN0cmFpdC5UeXBlGsQC",
            "CgVCb3VuZBJMCglwcmVjZWRpbmcYASABKAsyNy5pby5zdWJzdHJhaXQuRXhw",
            "cmVzc2lvbi5XaW5kb3dGdW5jdGlvbi5Cb3VuZC5QcmVjZWRpbmdIABJMCglm",
            "b2xsb3dpbmcYAiABKAsyNy5pby5zdWJzdHJhaXQuRXhwcmVzc2lvbi5XaW5k",
            "b3dGdW5jdGlvbi5Cb3VuZC5Gb2xsb3dpbmdIABJPCgtjdXJyZW50X3JvdxgD",
            "IAEoCzI4LmlvLnN1YnN0cmFpdC5FeHByZXNzaW9uLldpbmRvd0Z1bmN0aW9u",
            "LkJvdW5kLkN1cnJlbnRSb3dIABobCglQcmVjZWRpbmcSDgoGb2Zmc2V0GAEg",
            "ASgDGhsKCUZvbGxvd2luZxIOCgZvZmZzZXQYASABKAMaDAoKQ3VycmVudFJv",
            "d0IGCgRraW5kGr8CCglTb3J0RmllbGQSJgoEZXhwchgBIAEoCzIYLmlvLnN1",
            "YnN0cmFpdC5FeHByZXNzaW9uEj0KBmZvcm1hbBgCIAEoDjIrLmlvLnN1YnN0",
            "cmFpdC5FeHByZXNzaW9uLlNvcnRGaWVsZC5Tb3J0VHlwZUgAEkIKE2NvbXBh",
            "cmlzb25fZnVuY3Rpb24YAyABKAsyIy5pby5zdWJzdHJhaXQuRXh0ZW5zaW9u",
            "cy5GdW5jdGlvbklkSAAiegoIU29ydFR5cGUSCwoHVU5LTk9XThAAEhMKD0FT",
            "Q19OVUxMU19GSVJTVBABEhIKDkFTQ19OVUxMU19MQVNUEAISFAoQREVTQ19O",
            "VUxMU19GSVJTVBADEhMKD0RFU0NfTlVMTFNfTEFTVBAEEg0KCUNMVVNURVJF",
            "RBAFQgsKCXNvcnRfa2luZBrBAQoGSWZUaGVuEjUKA2lmcxgBIAMoCzIoLmlv",
            "LnN1YnN0cmFpdC5FeHByZXNzaW9uLklmVGhlbi5JZkNsYXVzZRImCgRlbHNl",
            "GAIgASgLMhguaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24aWAoISWZDbGF1c2US",
            "JAoCaWYYASABKAsyGC5pby5zdWJzdHJhaXQuRXhwcmVzc2lvbhImCgR0aGVu",
            "GAIgASgLMhguaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24a0wEKEFN3aXRjaEV4",
            "cHJlc3Npb24SPgoDaWZzGAEgAygLMjEuaW8uc3Vic3RyYWl0LkV4cHJlc3Np",
            "b24uU3dpdGNoRXhwcmVzc2lvbi5JZlZhbHVlEiYKBGVsc2UYAiABKAsyGC5p",
            "by5zdWJzdHJhaXQuRXhwcmVzc2lvbhpXCgdJZlZhbHVlEiQKAmlmGAEgASgL",
            "MhguaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24SJgoEdGhlbhgCIAEoCzIYLmlv",
            "LnN1YnN0cmFpdC5FeHByZXNzaW9uGmQKDlNpbmd1bGFyT3JMaXN0EicKBXZh",
            "bHVlGAEgASgLMhguaW8uc3Vic3RyYWl0LkV4cHJlc3Npb24SKQoHb3B0aW9u",
            "cxgCIAMoCzIYLmlvLnN1YnN0cmFpdC5FeHByZXNzaW9uGqgBCgtNdWx0aU9y",
            "TGlzdBInCgV2YWx1ZRgBIAMoCzIYLmlvLnN1YnN0cmFpdC5FeHByZXNzaW9u",
            "EjwKB29wdGlvbnMYAiADKAsyKy5pby5zdWJzdHJhaXQuRXhwcmVzc2lvbi5N",
            "dWx0aU9yTGlzdC5SZWNvcmQaMgoGUmVjb3JkEigKBmZpZWxkcxgBIAMoCzIY",
            "LmlvLnN1YnN0cmFpdC5FeHByZXNzaW9uGq8DChBFbWJlZGRlZEZ1bmN0aW9u",
            "EisKCWFyZ3VtZW50cxgBIAMoCzIYLmlvLnN1YnN0cmFpdC5FeHByZXNzaW9u",
            "EicKC291dHB1dF90eXBlGAIgASgLMhIuaW8uc3Vic3RyYWl0LlR5cGUSYAoW",
            "cHl0aG9uX3BpY2tsZV9mdW5jdGlvbhgDIAEoCzI+LmlvLnN1YnN0cmFpdC5F",
            "eHByZXNzaW9uLkVtYmVkZGVkRnVuY3Rpb24uUHl0aG9uUGlja2xlRnVuY3Rp",
            "b25IABJeChV3ZWJfYXNzZW1ibHlfZnVuY3Rpb24YBCABKAsyPS5pby5zdWJz",
            "dHJhaXQuRXhwcmVzc2lvbi5FbWJlZGRlZEZ1bmN0aW9uLldlYkFzc2VtYmx5",
            "RnVuY3Rpb25IABo+ChRQeXRob25QaWNrbGVGdW5jdGlvbhIQCghmdW5jdGlv",
            "bhgBIAEoDBIUCgxwcmVyZXF1aXNpdGUYAiADKAkaOwoTV2ViQXNzZW1ibHlG",
            "dW5jdGlvbhIOCgZzY3JpcHQYASABKAwSFAoMcHJlcmVxdWlzaXRlGAIgAygJ",
            "QgYKBGtpbmQikQEKEEFnZ3JlZ2F0aW9uUGhhc2USCwoHVU5LTk9XThAAEhsK",
            "F0lOSVRJQUxfVE9fSU5URVJNRURJQVRFEAESIAocSU5URVJNRURJQVRFX1RP",
            "X0lOVEVSTUVESUFURRACEhUKEUlOSVRJQUxfVE9fUkVTVUxUEAMSGgoWSU5U",
            "RVJNRURJQVRFX1RPX1JFU1VMVBAEQgoKCHJleF90eXBlQhdQAaoCElN1YnN0",
            "cmFpdC5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Substrait.Protobuf.TypeReflection.Descriptor, global::Substrait.Protobuf.SelectionReflection.Descriptor, global::Substrait.Protobuf.ExtensionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression), global::Substrait.Protobuf.Expression.Parser, new[]{ "Literal", "Selection", "ScalarFunction", "WindowFunction", "IfThen", "SwitchExpression", "SingularOrList", "MultiOrList" }, new[]{ "RexType" }, new[]{ typeof(global::Substrait.Protobuf.Expression.Types.AggregationPhase) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.Literal), global::Substrait.Protobuf.Expression.Types.Literal.Parser, new[]{ "Boolean", "I8", "I16", "I32", "I64", "Fp32", "Fp64", "String", "Binary", "Timestamp", "Date", "Time", "IntervalYearToMonth", "IntervalDayToSecond", "FixedChar", "VarChar", "FixedBinary", "Decimal", "Struct", "Map", "TimestampTz", "Uuid", "Null" }, new[]{ "LiteralType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.Literal.Types.Map), global::Substrait.Protobuf.Expression.Types.Literal.Types.Map.Parser, new[]{ "KeyValues" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.Literal.Types.Map.Types.KeyValue), global::Substrait.Protobuf.Expression.Types.Literal.Types.Map.Types.KeyValue.Parser, new[]{ "Key", "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalYearToMonth), global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalYearToMonth.Parser, new[]{ "Years", "Months" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalDayToSecond), global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalDayToSecond.Parser, new[]{ "Days", "Seconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.Literal.Types.Struct), global::Substrait.Protobuf.Expression.Types.Literal.Types.Struct.Parser, new[]{ "Fields" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.ScalarFunction), global::Substrait.Protobuf.Expression.Types.ScalarFunction.Parser, new[]{ "Id", "Args", "OutputType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.AggregateFunction), global::Substrait.Protobuf.Expression.Types.AggregateFunction.Parser, new[]{ "Id", "Args", "Sorts", "Phase", "OutputType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.WindowFunction), global::Substrait.Protobuf.Expression.Types.WindowFunction.Parser, new[]{ "Id", "Partitions", "Sorts", "UpperBound", "LowerBound", "Phase", "OutputType" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound), global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Parser, new[]{ "Preceding", "Following", "CurrentRow" }, new[]{ "Kind" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Preceding), global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Preceding.Parser, new[]{ "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Following), global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Following.Parser, new[]{ "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.CurrentRow), global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.CurrentRow.Parser, null, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.SortField), global::Substrait.Protobuf.Expression.Types.SortField.Parser, new[]{ "Expr", "Formal", "ComparisonFunction" }, new[]{ "SortKind" }, new[]{ typeof(global::Substrait.Protobuf.Expression.Types.SortField.Types.SortType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.IfThen), global::Substrait.Protobuf.Expression.Types.IfThen.Parser, new[]{ "Ifs", "Else" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.IfThen.Types.IfClause), global::Substrait.Protobuf.Expression.Types.IfThen.Types.IfClause.Parser, new[]{ "If", "Then" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.SwitchExpression), global::Substrait.Protobuf.Expression.Types.SwitchExpression.Parser, new[]{ "Ifs", "Else" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.SwitchExpression.Types.IfValue), global::Substrait.Protobuf.Expression.Types.SwitchExpression.Types.IfValue.Parser, new[]{ "If", "Then" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.SingularOrList), global::Substrait.Protobuf.Expression.Types.SingularOrList.Parser, new[]{ "Value", "Options" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.MultiOrList), global::Substrait.Protobuf.Expression.Types.MultiOrList.Parser, new[]{ "Value", "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.MultiOrList.Types.Record), global::Substrait.Protobuf.Expression.Types.MultiOrList.Types.Record.Parser, new[]{ "Fields" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.EmbeddedFunction), global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Parser, new[]{ "Arguments", "OutputType", "PythonPickleFunction", "WebAssemblyFunction" }, new[]{ "Kind" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.PythonPickleFunction), global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.PythonPickleFunction.Parser, new[]{ "Function", "Prerequisite" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.WebAssemblyFunction), global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.WebAssemblyFunction.Parser, new[]{ "Script", "Prerequisite" }, null, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Expression : pb::IMessage<Expression>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Expression> _parser = new pb::MessageParser<Expression>(() => new Expression());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Expression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Substrait.Protobuf.ExpressionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expression(Expression other) : this() {
      switch (other.RexTypeCase) {
        case RexTypeOneofCase.Literal:
          Literal = other.Literal.Clone();
          break;
        case RexTypeOneofCase.Selection:
          Selection = other.Selection.Clone();
          break;
        case RexTypeOneofCase.ScalarFunction:
          ScalarFunction = other.ScalarFunction.Clone();
          break;
        case RexTypeOneofCase.WindowFunction:
          WindowFunction = other.WindowFunction.Clone();
          break;
        case RexTypeOneofCase.IfThen:
          IfThen = other.IfThen.Clone();
          break;
        case RexTypeOneofCase.SwitchExpression:
          SwitchExpression = other.SwitchExpression.Clone();
          break;
        case RexTypeOneofCase.SingularOrList:
          SingularOrList = other.SingularOrList.Clone();
          break;
        case RexTypeOneofCase.MultiOrList:
          MultiOrList = other.MultiOrList.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expression Clone() {
      return new Expression(this);
    }

    /// <summary>Field number for the "literal" field.</summary>
    public const int LiteralFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Substrait.Protobuf.Expression.Types.Literal Literal {
      get { return rexTypeCase_ == RexTypeOneofCase.Literal ? (global::Substrait.Protobuf.Expression.Types.Literal) rexType_ : null; }
      set {
        rexType_ = value;
        rexTypeCase_ = value == null ? RexTypeOneofCase.None : RexTypeOneofCase.Literal;
      }
    }

    /// <summary>Field number for the "selection" field.</summary>
    public const int SelectionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Substrait.Protobuf.FieldReference Selection {
      get { return rexTypeCase_ == RexTypeOneofCase.Selection ? (global::Substrait.Protobuf.FieldReference) rexType_ : null; }
      set {
        rexType_ = value;
        rexTypeCase_ = value == null ? RexTypeOneofCase.None : RexTypeOneofCase.Selection;
      }
    }

    /// <summary>Field number for the "scalar_function" field.</summary>
    public const int ScalarFunctionFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Substrait.Protobuf.Expression.Types.ScalarFunction ScalarFunction {
      get { return rexTypeCase_ == RexTypeOneofCase.ScalarFunction ? (global::Substrait.Protobuf.Expression.Types.ScalarFunction) rexType_ : null; }
      set {
        rexType_ = value;
        rexTypeCase_ = value == null ? RexTypeOneofCase.None : RexTypeOneofCase.ScalarFunction;
      }
    }

    /// <summary>Field number for the "window_function" field.</summary>
    public const int WindowFunctionFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Substrait.Protobuf.Expression.Types.WindowFunction WindowFunction {
      get { return rexTypeCase_ == RexTypeOneofCase.WindowFunction ? (global::Substrait.Protobuf.Expression.Types.WindowFunction) rexType_ : null; }
      set {
        rexType_ = value;
        rexTypeCase_ = value == null ? RexTypeOneofCase.None : RexTypeOneofCase.WindowFunction;
      }
    }

    /// <summary>Field number for the "if_then" field.</summary>
    public const int IfThenFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Substrait.Protobuf.Expression.Types.IfThen IfThen {
      get { return rexTypeCase_ == RexTypeOneofCase.IfThen ? (global::Substrait.Protobuf.Expression.Types.IfThen) rexType_ : null; }
      set {
        rexType_ = value;
        rexTypeCase_ = value == null ? RexTypeOneofCase.None : RexTypeOneofCase.IfThen;
      }
    }

    /// <summary>Field number for the "switch_expression" field.</summary>
    public const int SwitchExpressionFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Substrait.Protobuf.Expression.Types.SwitchExpression SwitchExpression {
      get { return rexTypeCase_ == RexTypeOneofCase.SwitchExpression ? (global::Substrait.Protobuf.Expression.Types.SwitchExpression) rexType_ : null; }
      set {
        rexType_ = value;
        rexTypeCase_ = value == null ? RexTypeOneofCase.None : RexTypeOneofCase.SwitchExpression;
      }
    }

    /// <summary>Field number for the "singular_or_list" field.</summary>
    public const int SingularOrListFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Substrait.Protobuf.Expression.Types.SingularOrList SingularOrList {
      get { return rexTypeCase_ == RexTypeOneofCase.SingularOrList ? (global::Substrait.Protobuf.Expression.Types.SingularOrList) rexType_ : null; }
      set {
        rexType_ = value;
        rexTypeCase_ = value == null ? RexTypeOneofCase.None : RexTypeOneofCase.SingularOrList;
      }
    }

    /// <summary>Field number for the "multi_or_list" field.</summary>
    public const int MultiOrListFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Substrait.Protobuf.Expression.Types.MultiOrList MultiOrList {
      get { return rexTypeCase_ == RexTypeOneofCase.MultiOrList ? (global::Substrait.Protobuf.Expression.Types.MultiOrList) rexType_ : null; }
      set {
        rexType_ = value;
        rexTypeCase_ = value == null ? RexTypeOneofCase.None : RexTypeOneofCase.MultiOrList;
      }
    }

    private object rexType_;
    /// <summary>Enum of possible cases for the "rex_type" oneof.</summary>
    public enum RexTypeOneofCase {
      None = 0,
      Literal = 1,
      Selection = 2,
      ScalarFunction = 3,
      WindowFunction = 5,
      IfThen = 6,
      SwitchExpression = 7,
      SingularOrList = 8,
      MultiOrList = 9,
    }
    private RexTypeOneofCase rexTypeCase_ = RexTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RexTypeOneofCase RexTypeCase {
      get { return rexTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRexType() {
      rexTypeCase_ = RexTypeOneofCase.None;
      rexType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Expression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Expression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Literal, other.Literal)) return false;
      if (!object.Equals(Selection, other.Selection)) return false;
      if (!object.Equals(ScalarFunction, other.ScalarFunction)) return false;
      if (!object.Equals(WindowFunction, other.WindowFunction)) return false;
      if (!object.Equals(IfThen, other.IfThen)) return false;
      if (!object.Equals(SwitchExpression, other.SwitchExpression)) return false;
      if (!object.Equals(SingularOrList, other.SingularOrList)) return false;
      if (!object.Equals(MultiOrList, other.MultiOrList)) return false;
      if (RexTypeCase != other.RexTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rexTypeCase_ == RexTypeOneofCase.Literal) hash ^= Literal.GetHashCode();
      if (rexTypeCase_ == RexTypeOneofCase.Selection) hash ^= Selection.GetHashCode();
      if (rexTypeCase_ == RexTypeOneofCase.ScalarFunction) hash ^= ScalarFunction.GetHashCode();
      if (rexTypeCase_ == RexTypeOneofCase.WindowFunction) hash ^= WindowFunction.GetHashCode();
      if (rexTypeCase_ == RexTypeOneofCase.IfThen) hash ^= IfThen.GetHashCode();
      if (rexTypeCase_ == RexTypeOneofCase.SwitchExpression) hash ^= SwitchExpression.GetHashCode();
      if (rexTypeCase_ == RexTypeOneofCase.SingularOrList) hash ^= SingularOrList.GetHashCode();
      if (rexTypeCase_ == RexTypeOneofCase.MultiOrList) hash ^= MultiOrList.GetHashCode();
      hash ^= (int) rexTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (rexTypeCase_ == RexTypeOneofCase.Literal) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (rexTypeCase_ == RexTypeOneofCase.Selection) {
        output.WriteRawTag(18);
        output.WriteMessage(Selection);
      }
      if (rexTypeCase_ == RexTypeOneofCase.ScalarFunction) {
        output.WriteRawTag(26);
        output.WriteMessage(ScalarFunction);
      }
      if (rexTypeCase_ == RexTypeOneofCase.WindowFunction) {
        output.WriteRawTag(42);
        output.WriteMessage(WindowFunction);
      }
      if (rexTypeCase_ == RexTypeOneofCase.IfThen) {
        output.WriteRawTag(50);
        output.WriteMessage(IfThen);
      }
      if (rexTypeCase_ == RexTypeOneofCase.SwitchExpression) {
        output.WriteRawTag(58);
        output.WriteMessage(SwitchExpression);
      }
      if (rexTypeCase_ == RexTypeOneofCase.SingularOrList) {
        output.WriteRawTag(66);
        output.WriteMessage(SingularOrList);
      }
      if (rexTypeCase_ == RexTypeOneofCase.MultiOrList) {
        output.WriteRawTag(74);
        output.WriteMessage(MultiOrList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (rexTypeCase_ == RexTypeOneofCase.Literal) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (rexTypeCase_ == RexTypeOneofCase.Selection) {
        output.WriteRawTag(18);
        output.WriteMessage(Selection);
      }
      if (rexTypeCase_ == RexTypeOneofCase.ScalarFunction) {
        output.WriteRawTag(26);
        output.WriteMessage(ScalarFunction);
      }
      if (rexTypeCase_ == RexTypeOneofCase.WindowFunction) {
        output.WriteRawTag(42);
        output.WriteMessage(WindowFunction);
      }
      if (rexTypeCase_ == RexTypeOneofCase.IfThen) {
        output.WriteRawTag(50);
        output.WriteMessage(IfThen);
      }
      if (rexTypeCase_ == RexTypeOneofCase.SwitchExpression) {
        output.WriteRawTag(58);
        output.WriteMessage(SwitchExpression);
      }
      if (rexTypeCase_ == RexTypeOneofCase.SingularOrList) {
        output.WriteRawTag(66);
        output.WriteMessage(SingularOrList);
      }
      if (rexTypeCase_ == RexTypeOneofCase.MultiOrList) {
        output.WriteRawTag(74);
        output.WriteMessage(MultiOrList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rexTypeCase_ == RexTypeOneofCase.Literal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Literal);
      }
      if (rexTypeCase_ == RexTypeOneofCase.Selection) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selection);
      }
      if (rexTypeCase_ == RexTypeOneofCase.ScalarFunction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalarFunction);
      }
      if (rexTypeCase_ == RexTypeOneofCase.WindowFunction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindowFunction);
      }
      if (rexTypeCase_ == RexTypeOneofCase.IfThen) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IfThen);
      }
      if (rexTypeCase_ == RexTypeOneofCase.SwitchExpression) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitchExpression);
      }
      if (rexTypeCase_ == RexTypeOneofCase.SingularOrList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingularOrList);
      }
      if (rexTypeCase_ == RexTypeOneofCase.MultiOrList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiOrList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Expression other) {
      if (other == null) {
        return;
      }
      switch (other.RexTypeCase) {
        case RexTypeOneofCase.Literal:
          if (Literal == null) {
            Literal = new global::Substrait.Protobuf.Expression.Types.Literal();
          }
          Literal.MergeFrom(other.Literal);
          break;
        case RexTypeOneofCase.Selection:
          if (Selection == null) {
            Selection = new global::Substrait.Protobuf.FieldReference();
          }
          Selection.MergeFrom(other.Selection);
          break;
        case RexTypeOneofCase.ScalarFunction:
          if (ScalarFunction == null) {
            ScalarFunction = new global::Substrait.Protobuf.Expression.Types.ScalarFunction();
          }
          ScalarFunction.MergeFrom(other.ScalarFunction);
          break;
        case RexTypeOneofCase.WindowFunction:
          if (WindowFunction == null) {
            WindowFunction = new global::Substrait.Protobuf.Expression.Types.WindowFunction();
          }
          WindowFunction.MergeFrom(other.WindowFunction);
          break;
        case RexTypeOneofCase.IfThen:
          if (IfThen == null) {
            IfThen = new global::Substrait.Protobuf.Expression.Types.IfThen();
          }
          IfThen.MergeFrom(other.IfThen);
          break;
        case RexTypeOneofCase.SwitchExpression:
          if (SwitchExpression == null) {
            SwitchExpression = new global::Substrait.Protobuf.Expression.Types.SwitchExpression();
          }
          SwitchExpression.MergeFrom(other.SwitchExpression);
          break;
        case RexTypeOneofCase.SingularOrList:
          if (SingularOrList == null) {
            SingularOrList = new global::Substrait.Protobuf.Expression.Types.SingularOrList();
          }
          SingularOrList.MergeFrom(other.SingularOrList);
          break;
        case RexTypeOneofCase.MultiOrList:
          if (MultiOrList == null) {
            MultiOrList = new global::Substrait.Protobuf.Expression.Types.MultiOrList();
          }
          MultiOrList.MergeFrom(other.MultiOrList);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Substrait.Protobuf.Expression.Types.Literal subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal();
            if (rexTypeCase_ == RexTypeOneofCase.Literal) {
              subBuilder.MergeFrom(Literal);
            }
            input.ReadMessage(subBuilder);
            Literal = subBuilder;
            break;
          }
          case 18: {
            global::Substrait.Protobuf.FieldReference subBuilder = new global::Substrait.Protobuf.FieldReference();
            if (rexTypeCase_ == RexTypeOneofCase.Selection) {
              subBuilder.MergeFrom(Selection);
            }
            input.ReadMessage(subBuilder);
            Selection = subBuilder;
            break;
          }
          case 26: {
            global::Substrait.Protobuf.Expression.Types.ScalarFunction subBuilder = new global::Substrait.Protobuf.Expression.Types.ScalarFunction();
            if (rexTypeCase_ == RexTypeOneofCase.ScalarFunction) {
              subBuilder.MergeFrom(ScalarFunction);
            }
            input.ReadMessage(subBuilder);
            ScalarFunction = subBuilder;
            break;
          }
          case 42: {
            global::Substrait.Protobuf.Expression.Types.WindowFunction subBuilder = new global::Substrait.Protobuf.Expression.Types.WindowFunction();
            if (rexTypeCase_ == RexTypeOneofCase.WindowFunction) {
              subBuilder.MergeFrom(WindowFunction);
            }
            input.ReadMessage(subBuilder);
            WindowFunction = subBuilder;
            break;
          }
          case 50: {
            global::Substrait.Protobuf.Expression.Types.IfThen subBuilder = new global::Substrait.Protobuf.Expression.Types.IfThen();
            if (rexTypeCase_ == RexTypeOneofCase.IfThen) {
              subBuilder.MergeFrom(IfThen);
            }
            input.ReadMessage(subBuilder);
            IfThen = subBuilder;
            break;
          }
          case 58: {
            global::Substrait.Protobuf.Expression.Types.SwitchExpression subBuilder = new global::Substrait.Protobuf.Expression.Types.SwitchExpression();
            if (rexTypeCase_ == RexTypeOneofCase.SwitchExpression) {
              subBuilder.MergeFrom(SwitchExpression);
            }
            input.ReadMessage(subBuilder);
            SwitchExpression = subBuilder;
            break;
          }
          case 66: {
            global::Substrait.Protobuf.Expression.Types.SingularOrList subBuilder = new global::Substrait.Protobuf.Expression.Types.SingularOrList();
            if (rexTypeCase_ == RexTypeOneofCase.SingularOrList) {
              subBuilder.MergeFrom(SingularOrList);
            }
            input.ReadMessage(subBuilder);
            SingularOrList = subBuilder;
            break;
          }
          case 74: {
            global::Substrait.Protobuf.Expression.Types.MultiOrList subBuilder = new global::Substrait.Protobuf.Expression.Types.MultiOrList();
            if (rexTypeCase_ == RexTypeOneofCase.MultiOrList) {
              subBuilder.MergeFrom(MultiOrList);
            }
            input.ReadMessage(subBuilder);
            MultiOrList = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Substrait.Protobuf.Expression.Types.Literal subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal();
            if (rexTypeCase_ == RexTypeOneofCase.Literal) {
              subBuilder.MergeFrom(Literal);
            }
            input.ReadMessage(subBuilder);
            Literal = subBuilder;
            break;
          }
          case 18: {
            global::Substrait.Protobuf.FieldReference subBuilder = new global::Substrait.Protobuf.FieldReference();
            if (rexTypeCase_ == RexTypeOneofCase.Selection) {
              subBuilder.MergeFrom(Selection);
            }
            input.ReadMessage(subBuilder);
            Selection = subBuilder;
            break;
          }
          case 26: {
            global::Substrait.Protobuf.Expression.Types.ScalarFunction subBuilder = new global::Substrait.Protobuf.Expression.Types.ScalarFunction();
            if (rexTypeCase_ == RexTypeOneofCase.ScalarFunction) {
              subBuilder.MergeFrom(ScalarFunction);
            }
            input.ReadMessage(subBuilder);
            ScalarFunction = subBuilder;
            break;
          }
          case 42: {
            global::Substrait.Protobuf.Expression.Types.WindowFunction subBuilder = new global::Substrait.Protobuf.Expression.Types.WindowFunction();
            if (rexTypeCase_ == RexTypeOneofCase.WindowFunction) {
              subBuilder.MergeFrom(WindowFunction);
            }
            input.ReadMessage(subBuilder);
            WindowFunction = subBuilder;
            break;
          }
          case 50: {
            global::Substrait.Protobuf.Expression.Types.IfThen subBuilder = new global::Substrait.Protobuf.Expression.Types.IfThen();
            if (rexTypeCase_ == RexTypeOneofCase.IfThen) {
              subBuilder.MergeFrom(IfThen);
            }
            input.ReadMessage(subBuilder);
            IfThen = subBuilder;
            break;
          }
          case 58: {
            global::Substrait.Protobuf.Expression.Types.SwitchExpression subBuilder = new global::Substrait.Protobuf.Expression.Types.SwitchExpression();
            if (rexTypeCase_ == RexTypeOneofCase.SwitchExpression) {
              subBuilder.MergeFrom(SwitchExpression);
            }
            input.ReadMessage(subBuilder);
            SwitchExpression = subBuilder;
            break;
          }
          case 66: {
            global::Substrait.Protobuf.Expression.Types.SingularOrList subBuilder = new global::Substrait.Protobuf.Expression.Types.SingularOrList();
            if (rexTypeCase_ == RexTypeOneofCase.SingularOrList) {
              subBuilder.MergeFrom(SingularOrList);
            }
            input.ReadMessage(subBuilder);
            SingularOrList = subBuilder;
            break;
          }
          case 74: {
            global::Substrait.Protobuf.Expression.Types.MultiOrList subBuilder = new global::Substrait.Protobuf.Expression.Types.MultiOrList();
            if (rexTypeCase_ == RexTypeOneofCase.MultiOrList) {
              subBuilder.MergeFrom(MultiOrList);
            }
            input.ReadMessage(subBuilder);
            MultiOrList = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Expression message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AggregationPhase {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("INITIAL_TO_INTERMEDIATE")] InitialToIntermediate = 1,
        [pbr::OriginalName("INTERMEDIATE_TO_INTERMEDIATE")] IntermediateToIntermediate = 2,
        [pbr::OriginalName("INITIAL_TO_RESULT")] InitialToResult = 3,
        [pbr::OriginalName("INTERMEDIATE_TO_RESULT")] IntermediateToResult = 4,
      }

      public sealed partial class Literal : pb::IMessage<Literal>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Literal> _parser = new pb::MessageParser<Literal>(() => new Literal());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Literal> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Literal() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Literal(Literal other) : this() {
          switch (other.LiteralTypeCase) {
            case LiteralTypeOneofCase.Boolean:
              Boolean = other.Boolean;
              break;
            case LiteralTypeOneofCase.I8:
              I8 = other.I8;
              break;
            case LiteralTypeOneofCase.I16:
              I16 = other.I16;
              break;
            case LiteralTypeOneofCase.I32:
              I32 = other.I32;
              break;
            case LiteralTypeOneofCase.I64:
              I64 = other.I64;
              break;
            case LiteralTypeOneofCase.Fp32:
              Fp32 = other.Fp32;
              break;
            case LiteralTypeOneofCase.Fp64:
              Fp64 = other.Fp64;
              break;
            case LiteralTypeOneofCase.String:
              String = other.String;
              break;
            case LiteralTypeOneofCase.Binary:
              Binary = other.Binary;
              break;
            case LiteralTypeOneofCase.Timestamp:
              Timestamp = other.Timestamp;
              break;
            case LiteralTypeOneofCase.Date:
              Date = other.Date;
              break;
            case LiteralTypeOneofCase.Time:
              Time = other.Time;
              break;
            case LiteralTypeOneofCase.IntervalYearToMonth:
              IntervalYearToMonth = other.IntervalYearToMonth.Clone();
              break;
            case LiteralTypeOneofCase.IntervalDayToSecond:
              IntervalDayToSecond = other.IntervalDayToSecond.Clone();
              break;
            case LiteralTypeOneofCase.FixedChar:
              FixedChar = other.FixedChar;
              break;
            case LiteralTypeOneofCase.VarChar:
              VarChar = other.VarChar;
              break;
            case LiteralTypeOneofCase.FixedBinary:
              FixedBinary = other.FixedBinary;
              break;
            case LiteralTypeOneofCase.Decimal:
              Decimal = other.Decimal;
              break;
            case LiteralTypeOneofCase.Struct:
              Struct = other.Struct.Clone();
              break;
            case LiteralTypeOneofCase.Map:
              Map = other.Map.Clone();
              break;
            case LiteralTypeOneofCase.TimestampTz:
              TimestampTz = other.TimestampTz;
              break;
            case LiteralTypeOneofCase.Uuid:
              Uuid = other.Uuid;
              break;
            case LiteralTypeOneofCase.Null:
              Null = other.Null.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Literal Clone() {
          return new Literal(this);
        }

        /// <summary>Field number for the "boolean" field.</summary>
        public const int BooleanFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Boolean {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Boolean ? (bool) literalType_ : false; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Boolean;
          }
        }

        /// <summary>Field number for the "i8" field.</summary>
        public const int I8FieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int I8 {
          get { return literalTypeCase_ == LiteralTypeOneofCase.I8 ? (int) literalType_ : 0; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.I8;
          }
        }

        /// <summary>Field number for the "i16" field.</summary>
        public const int I16FieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int I16 {
          get { return literalTypeCase_ == LiteralTypeOneofCase.I16 ? (int) literalType_ : 0; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.I16;
          }
        }

        /// <summary>Field number for the "i32" field.</summary>
        public const int I32FieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int I32 {
          get { return literalTypeCase_ == LiteralTypeOneofCase.I32 ? (int) literalType_ : 0; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.I32;
          }
        }

        /// <summary>Field number for the "i64" field.</summary>
        public const int I64FieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long I64 {
          get { return literalTypeCase_ == LiteralTypeOneofCase.I64 ? (long) literalType_ : 0L; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.I64;
          }
        }

        /// <summary>Field number for the "fp32" field.</summary>
        public const int Fp32FieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Fp32 {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Fp32 ? (float) literalType_ : 0F; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Fp32;
          }
        }

        /// <summary>Field number for the "fp64" field.</summary>
        public const int Fp64FieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Fp64 {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Fp64 ? (double) literalType_ : 0D; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Fp64;
          }
        }

        /// <summary>Field number for the "string" field.</summary>
        public const int StringFieldNumber = 12;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string String {
          get { return literalTypeCase_ == LiteralTypeOneofCase.String ? (string) literalType_ : ""; }
          set {
            literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            literalTypeCase_ = LiteralTypeOneofCase.String;
          }
        }

        /// <summary>Field number for the "binary" field.</summary>
        public const int BinaryFieldNumber = 13;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Binary {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Binary ? (pb::ByteString) literalType_ : pb::ByteString.Empty; }
          set {
            literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            literalTypeCase_ = LiteralTypeOneofCase.Binary;
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 14;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Timestamp ? (ulong) literalType_ : 0UL; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Timestamp;
          }
        }

        /// <summary>Field number for the "date" field.</summary>
        public const int DateFieldNumber = 16;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Date {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Date ? (uint) literalType_ : 0; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Date;
          }
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 17;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Time {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Time ? (ulong) literalType_ : 0UL; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Time;
          }
        }

        /// <summary>Field number for the "interval_year_to_month" field.</summary>
        public const int IntervalYearToMonthFieldNumber = 19;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalYearToMonth IntervalYearToMonth {
          get { return literalTypeCase_ == LiteralTypeOneofCase.IntervalYearToMonth ? (global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalYearToMonth) literalType_ : null; }
          set {
            literalType_ = value;
            literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.IntervalYearToMonth;
          }
        }

        /// <summary>Field number for the "interval_day_to_second" field.</summary>
        public const int IntervalDayToSecondFieldNumber = 20;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalDayToSecond IntervalDayToSecond {
          get { return literalTypeCase_ == LiteralTypeOneofCase.IntervalDayToSecond ? (global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalDayToSecond) literalType_ : null; }
          set {
            literalType_ = value;
            literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.IntervalDayToSecond;
          }
        }

        /// <summary>Field number for the "fixed_char" field.</summary>
        public const int FixedCharFieldNumber = 21;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FixedChar {
          get { return literalTypeCase_ == LiteralTypeOneofCase.FixedChar ? (string) literalType_ : ""; }
          set {
            literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            literalTypeCase_ = LiteralTypeOneofCase.FixedChar;
          }
        }

        /// <summary>Field number for the "var_char" field.</summary>
        public const int VarCharFieldNumber = 22;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VarChar {
          get { return literalTypeCase_ == LiteralTypeOneofCase.VarChar ? (string) literalType_ : ""; }
          set {
            literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            literalTypeCase_ = LiteralTypeOneofCase.VarChar;
          }
        }

        /// <summary>Field number for the "fixed_binary" field.</summary>
        public const int FixedBinaryFieldNumber = 23;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString FixedBinary {
          get { return literalTypeCase_ == LiteralTypeOneofCase.FixedBinary ? (pb::ByteString) literalType_ : pb::ByteString.Empty; }
          set {
            literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            literalTypeCase_ = LiteralTypeOneofCase.FixedBinary;
          }
        }

        /// <summary>Field number for the "decimal" field.</summary>
        public const int DecimalFieldNumber = 24;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Decimal {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Decimal ? (pb::ByteString) literalType_ : pb::ByteString.Empty; }
          set {
            literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            literalTypeCase_ = LiteralTypeOneofCase.Decimal;
          }
        }

        /// <summary>Field number for the "struct" field.</summary>
        public const int StructFieldNumber = 25;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.Literal.Types.Struct Struct {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Struct ? (global::Substrait.Protobuf.Expression.Types.Literal.Types.Struct) literalType_ : null; }
          set {
            literalType_ = value;
            literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Struct;
          }
        }

        /// <summary>Field number for the "map" field.</summary>
        public const int MapFieldNumber = 26;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.Literal.Types.Map Map {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Map ? (global::Substrait.Protobuf.Expression.Types.Literal.Types.Map) literalType_ : null; }
          set {
            literalType_ = value;
            literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Map;
          }
        }

        /// <summary>Field number for the "timestamp_tz" field.</summary>
        public const int TimestampTzFieldNumber = 27;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TimestampTz {
          get { return literalTypeCase_ == LiteralTypeOneofCase.TimestampTz ? (ulong) literalType_ : 0UL; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.TimestampTz;
          }
        }

        /// <summary>Field number for the "uuid" field.</summary>
        public const int UuidFieldNumber = 28;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Uuid {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Uuid ? (pb::ByteString) literalType_ : pb::ByteString.Empty; }
          set {
            literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            literalTypeCase_ = LiteralTypeOneofCase.Uuid;
          }
        }

        /// <summary>Field number for the "null" field.</summary>
        public const int NullFieldNumber = 29;
        /// <summary>
        /// a typed null literal
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Type Null {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Null ? (global::Substrait.Protobuf.Type) literalType_ : null; }
          set {
            literalType_ = value;
            literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Null;
          }
        }

        private object literalType_;
        /// <summary>Enum of possible cases for the "literal_type" oneof.</summary>
        public enum LiteralTypeOneofCase {
          None = 0,
          Boolean = 1,
          I8 = 2,
          I16 = 3,
          I32 = 5,
          I64 = 7,
          Fp32 = 10,
          Fp64 = 11,
          String = 12,
          Binary = 13,
          Timestamp = 14,
          Date = 16,
          Time = 17,
          IntervalYearToMonth = 19,
          IntervalDayToSecond = 20,
          FixedChar = 21,
          VarChar = 22,
          FixedBinary = 23,
          Decimal = 24,
          Struct = 25,
          Map = 26,
          TimestampTz = 27,
          Uuid = 28,
          Null = 29,
        }
        private LiteralTypeOneofCase literalTypeCase_ = LiteralTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LiteralTypeOneofCase LiteralTypeCase {
          get { return literalTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLiteralType() {
          literalTypeCase_ = LiteralTypeOneofCase.None;
          literalType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Literal);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Literal other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Boolean != other.Boolean) return false;
          if (I8 != other.I8) return false;
          if (I16 != other.I16) return false;
          if (I32 != other.I32) return false;
          if (I64 != other.I64) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fp32, other.Fp32)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Fp64, other.Fp64)) return false;
          if (String != other.String) return false;
          if (Binary != other.Binary) return false;
          if (Timestamp != other.Timestamp) return false;
          if (Date != other.Date) return false;
          if (Time != other.Time) return false;
          if (!object.Equals(IntervalYearToMonth, other.IntervalYearToMonth)) return false;
          if (!object.Equals(IntervalDayToSecond, other.IntervalDayToSecond)) return false;
          if (FixedChar != other.FixedChar) return false;
          if (VarChar != other.VarChar) return false;
          if (FixedBinary != other.FixedBinary) return false;
          if (Decimal != other.Decimal) return false;
          if (!object.Equals(Struct, other.Struct)) return false;
          if (!object.Equals(Map, other.Map)) return false;
          if (TimestampTz != other.TimestampTz) return false;
          if (Uuid != other.Uuid) return false;
          if (!object.Equals(Null, other.Null)) return false;
          if (LiteralTypeCase != other.LiteralTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (literalTypeCase_ == LiteralTypeOneofCase.Boolean) hash ^= Boolean.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.I8) hash ^= I8.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.I16) hash ^= I16.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.I32) hash ^= I32.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.I64) hash ^= I64.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Fp32) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fp32);
          if (literalTypeCase_ == LiteralTypeOneofCase.Fp64) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Fp64);
          if (literalTypeCase_ == LiteralTypeOneofCase.String) hash ^= String.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Binary) hash ^= Binary.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Date) hash ^= Date.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Time) hash ^= Time.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.IntervalYearToMonth) hash ^= IntervalYearToMonth.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.IntervalDayToSecond) hash ^= IntervalDayToSecond.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.FixedChar) hash ^= FixedChar.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.VarChar) hash ^= VarChar.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.FixedBinary) hash ^= FixedBinary.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) hash ^= Decimal.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Struct) hash ^= Struct.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Map) hash ^= Map.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.TimestampTz) hash ^= TimestampTz.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Uuid) hash ^= Uuid.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Null) hash ^= Null.GetHashCode();
          hash ^= (int) literalTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (literalTypeCase_ == LiteralTypeOneofCase.Boolean) {
            output.WriteRawTag(8);
            output.WriteBool(Boolean);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I8) {
            output.WriteRawTag(16);
            output.WriteInt32(I8);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I16) {
            output.WriteRawTag(24);
            output.WriteInt32(I16);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I32) {
            output.WriteRawTag(40);
            output.WriteInt32(I32);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I64) {
            output.WriteRawTag(56);
            output.WriteInt64(I64);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Fp32) {
            output.WriteRawTag(85);
            output.WriteFloat(Fp32);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Fp64) {
            output.WriteRawTag(89);
            output.WriteDouble(Fp64);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.String) {
            output.WriteRawTag(98);
            output.WriteString(String);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Binary) {
            output.WriteRawTag(106);
            output.WriteBytes(Binary);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Timestamp) {
            output.WriteRawTag(113);
            output.WriteFixed64(Timestamp);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Date) {
            output.WriteRawTag(133, 1);
            output.WriteFixed32(Date);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Time) {
            output.WriteRawTag(136, 1);
            output.WriteUInt64(Time);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.IntervalYearToMonth) {
            output.WriteRawTag(154, 1);
            output.WriteMessage(IntervalYearToMonth);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.IntervalDayToSecond) {
            output.WriteRawTag(162, 1);
            output.WriteMessage(IntervalDayToSecond);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.FixedChar) {
            output.WriteRawTag(170, 1);
            output.WriteString(FixedChar);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.VarChar) {
            output.WriteRawTag(178, 1);
            output.WriteString(VarChar);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.FixedBinary) {
            output.WriteRawTag(186, 1);
            output.WriteBytes(FixedBinary);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
            output.WriteRawTag(194, 1);
            output.WriteBytes(Decimal);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
            output.WriteRawTag(202, 1);
            output.WriteMessage(Struct);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
            output.WriteRawTag(210, 1);
            output.WriteMessage(Map);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.TimestampTz) {
            output.WriteRawTag(217, 1);
            output.WriteFixed64(TimestampTz);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Uuid) {
            output.WriteRawTag(226, 1);
            output.WriteBytes(Uuid);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
            output.WriteRawTag(234, 1);
            output.WriteMessage(Null);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (literalTypeCase_ == LiteralTypeOneofCase.Boolean) {
            output.WriteRawTag(8);
            output.WriteBool(Boolean);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I8) {
            output.WriteRawTag(16);
            output.WriteInt32(I8);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I16) {
            output.WriteRawTag(24);
            output.WriteInt32(I16);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I32) {
            output.WriteRawTag(40);
            output.WriteInt32(I32);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I64) {
            output.WriteRawTag(56);
            output.WriteInt64(I64);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Fp32) {
            output.WriteRawTag(85);
            output.WriteFloat(Fp32);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Fp64) {
            output.WriteRawTag(89);
            output.WriteDouble(Fp64);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.String) {
            output.WriteRawTag(98);
            output.WriteString(String);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Binary) {
            output.WriteRawTag(106);
            output.WriteBytes(Binary);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Timestamp) {
            output.WriteRawTag(113);
            output.WriteFixed64(Timestamp);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Date) {
            output.WriteRawTag(133, 1);
            output.WriteFixed32(Date);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Time) {
            output.WriteRawTag(136, 1);
            output.WriteUInt64(Time);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.IntervalYearToMonth) {
            output.WriteRawTag(154, 1);
            output.WriteMessage(IntervalYearToMonth);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.IntervalDayToSecond) {
            output.WriteRawTag(162, 1);
            output.WriteMessage(IntervalDayToSecond);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.FixedChar) {
            output.WriteRawTag(170, 1);
            output.WriteString(FixedChar);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.VarChar) {
            output.WriteRawTag(178, 1);
            output.WriteString(VarChar);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.FixedBinary) {
            output.WriteRawTag(186, 1);
            output.WriteBytes(FixedBinary);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
            output.WriteRawTag(194, 1);
            output.WriteBytes(Decimal);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
            output.WriteRawTag(202, 1);
            output.WriteMessage(Struct);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
            output.WriteRawTag(210, 1);
            output.WriteMessage(Map);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.TimestampTz) {
            output.WriteRawTag(217, 1);
            output.WriteFixed64(TimestampTz);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Uuid) {
            output.WriteRawTag(226, 1);
            output.WriteBytes(Uuid);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
            output.WriteRawTag(234, 1);
            output.WriteMessage(Null);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (literalTypeCase_ == LiteralTypeOneofCase.Boolean) {
            size += 1 + 1;
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I8) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(I8);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I16) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(I16);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I32) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(I32);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.I64) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(I64);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Fp32) {
            size += 1 + 4;
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Fp64) {
            size += 1 + 8;
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.String) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Binary) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Timestamp) {
            size += 1 + 8;
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Date) {
            size += 2 + 4;
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Time) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Time);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.IntervalYearToMonth) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(IntervalYearToMonth);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.IntervalDayToSecond) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(IntervalDayToSecond);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.FixedChar) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(FixedChar);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.VarChar) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(VarChar);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.FixedBinary) {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(FixedBinary);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(Decimal);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Struct);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Map);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.TimestampTz) {
            size += 2 + 8;
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Uuid) {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(Uuid);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Null);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Literal other) {
          if (other == null) {
            return;
          }
          switch (other.LiteralTypeCase) {
            case LiteralTypeOneofCase.Boolean:
              Boolean = other.Boolean;
              break;
            case LiteralTypeOneofCase.I8:
              I8 = other.I8;
              break;
            case LiteralTypeOneofCase.I16:
              I16 = other.I16;
              break;
            case LiteralTypeOneofCase.I32:
              I32 = other.I32;
              break;
            case LiteralTypeOneofCase.I64:
              I64 = other.I64;
              break;
            case LiteralTypeOneofCase.Fp32:
              Fp32 = other.Fp32;
              break;
            case LiteralTypeOneofCase.Fp64:
              Fp64 = other.Fp64;
              break;
            case LiteralTypeOneofCase.String:
              String = other.String;
              break;
            case LiteralTypeOneofCase.Binary:
              Binary = other.Binary;
              break;
            case LiteralTypeOneofCase.Timestamp:
              Timestamp = other.Timestamp;
              break;
            case LiteralTypeOneofCase.Date:
              Date = other.Date;
              break;
            case LiteralTypeOneofCase.Time:
              Time = other.Time;
              break;
            case LiteralTypeOneofCase.IntervalYearToMonth:
              if (IntervalYearToMonth == null) {
                IntervalYearToMonth = new global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalYearToMonth();
              }
              IntervalYearToMonth.MergeFrom(other.IntervalYearToMonth);
              break;
            case LiteralTypeOneofCase.IntervalDayToSecond:
              if (IntervalDayToSecond == null) {
                IntervalDayToSecond = new global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalDayToSecond();
              }
              IntervalDayToSecond.MergeFrom(other.IntervalDayToSecond);
              break;
            case LiteralTypeOneofCase.FixedChar:
              FixedChar = other.FixedChar;
              break;
            case LiteralTypeOneofCase.VarChar:
              VarChar = other.VarChar;
              break;
            case LiteralTypeOneofCase.FixedBinary:
              FixedBinary = other.FixedBinary;
              break;
            case LiteralTypeOneofCase.Decimal:
              Decimal = other.Decimal;
              break;
            case LiteralTypeOneofCase.Struct:
              if (Struct == null) {
                Struct = new global::Substrait.Protobuf.Expression.Types.Literal.Types.Struct();
              }
              Struct.MergeFrom(other.Struct);
              break;
            case LiteralTypeOneofCase.Map:
              if (Map == null) {
                Map = new global::Substrait.Protobuf.Expression.Types.Literal.Types.Map();
              }
              Map.MergeFrom(other.Map);
              break;
            case LiteralTypeOneofCase.TimestampTz:
              TimestampTz = other.TimestampTz;
              break;
            case LiteralTypeOneofCase.Uuid:
              Uuid = other.Uuid;
              break;
            case LiteralTypeOneofCase.Null:
              if (Null == null) {
                Null = new global::Substrait.Protobuf.Type();
              }
              Null.MergeFrom(other.Null);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Boolean = input.ReadBool();
                break;
              }
              case 16: {
                I8 = input.ReadInt32();
                break;
              }
              case 24: {
                I16 = input.ReadInt32();
                break;
              }
              case 40: {
                I32 = input.ReadInt32();
                break;
              }
              case 56: {
                I64 = input.ReadInt64();
                break;
              }
              case 85: {
                Fp32 = input.ReadFloat();
                break;
              }
              case 89: {
                Fp64 = input.ReadDouble();
                break;
              }
              case 98: {
                String = input.ReadString();
                break;
              }
              case 106: {
                Binary = input.ReadBytes();
                break;
              }
              case 113: {
                Timestamp = input.ReadFixed64();
                break;
              }
              case 133: {
                Date = input.ReadFixed32();
                break;
              }
              case 136: {
                Time = input.ReadUInt64();
                break;
              }
              case 154: {
                global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalYearToMonth subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalYearToMonth();
                if (literalTypeCase_ == LiteralTypeOneofCase.IntervalYearToMonth) {
                  subBuilder.MergeFrom(IntervalYearToMonth);
                }
                input.ReadMessage(subBuilder);
                IntervalYearToMonth = subBuilder;
                break;
              }
              case 162: {
                global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalDayToSecond subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalDayToSecond();
                if (literalTypeCase_ == LiteralTypeOneofCase.IntervalDayToSecond) {
                  subBuilder.MergeFrom(IntervalDayToSecond);
                }
                input.ReadMessage(subBuilder);
                IntervalDayToSecond = subBuilder;
                break;
              }
              case 170: {
                FixedChar = input.ReadString();
                break;
              }
              case 178: {
                VarChar = input.ReadString();
                break;
              }
              case 186: {
                FixedBinary = input.ReadBytes();
                break;
              }
              case 194: {
                Decimal = input.ReadBytes();
                break;
              }
              case 202: {
                global::Substrait.Protobuf.Expression.Types.Literal.Types.Struct subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal.Types.Struct();
                if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
                  subBuilder.MergeFrom(Struct);
                }
                input.ReadMessage(subBuilder);
                Struct = subBuilder;
                break;
              }
              case 210: {
                global::Substrait.Protobuf.Expression.Types.Literal.Types.Map subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal.Types.Map();
                if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
                  subBuilder.MergeFrom(Map);
                }
                input.ReadMessage(subBuilder);
                Map = subBuilder;
                break;
              }
              case 217: {
                TimestampTz = input.ReadFixed64();
                break;
              }
              case 226: {
                Uuid = input.ReadBytes();
                break;
              }
              case 234: {
                global::Substrait.Protobuf.Type subBuilder = new global::Substrait.Protobuf.Type();
                if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
                  subBuilder.MergeFrom(Null);
                }
                input.ReadMessage(subBuilder);
                Null = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Boolean = input.ReadBool();
                break;
              }
              case 16: {
                I8 = input.ReadInt32();
                break;
              }
              case 24: {
                I16 = input.ReadInt32();
                break;
              }
              case 40: {
                I32 = input.ReadInt32();
                break;
              }
              case 56: {
                I64 = input.ReadInt64();
                break;
              }
              case 85: {
                Fp32 = input.ReadFloat();
                break;
              }
              case 89: {
                Fp64 = input.ReadDouble();
                break;
              }
              case 98: {
                String = input.ReadString();
                break;
              }
              case 106: {
                Binary = input.ReadBytes();
                break;
              }
              case 113: {
                Timestamp = input.ReadFixed64();
                break;
              }
              case 133: {
                Date = input.ReadFixed32();
                break;
              }
              case 136: {
                Time = input.ReadUInt64();
                break;
              }
              case 154: {
                global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalYearToMonth subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalYearToMonth();
                if (literalTypeCase_ == LiteralTypeOneofCase.IntervalYearToMonth) {
                  subBuilder.MergeFrom(IntervalYearToMonth);
                }
                input.ReadMessage(subBuilder);
                IntervalYearToMonth = subBuilder;
                break;
              }
              case 162: {
                global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalDayToSecond subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal.Types.IntervalDayToSecond();
                if (literalTypeCase_ == LiteralTypeOneofCase.IntervalDayToSecond) {
                  subBuilder.MergeFrom(IntervalDayToSecond);
                }
                input.ReadMessage(subBuilder);
                IntervalDayToSecond = subBuilder;
                break;
              }
              case 170: {
                FixedChar = input.ReadString();
                break;
              }
              case 178: {
                VarChar = input.ReadString();
                break;
              }
              case 186: {
                FixedBinary = input.ReadBytes();
                break;
              }
              case 194: {
                Decimal = input.ReadBytes();
                break;
              }
              case 202: {
                global::Substrait.Protobuf.Expression.Types.Literal.Types.Struct subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal.Types.Struct();
                if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
                  subBuilder.MergeFrom(Struct);
                }
                input.ReadMessage(subBuilder);
                Struct = subBuilder;
                break;
              }
              case 210: {
                global::Substrait.Protobuf.Expression.Types.Literal.Types.Map subBuilder = new global::Substrait.Protobuf.Expression.Types.Literal.Types.Map();
                if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
                  subBuilder.MergeFrom(Map);
                }
                input.ReadMessage(subBuilder);
                Map = subBuilder;
                break;
              }
              case 217: {
                TimestampTz = input.ReadFixed64();
                break;
              }
              case 226: {
                Uuid = input.ReadBytes();
                break;
              }
              case 234: {
                global::Substrait.Protobuf.Type subBuilder = new global::Substrait.Protobuf.Type();
                if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
                  subBuilder.MergeFrom(Null);
                }
                input.ReadMessage(subBuilder);
                Null = subBuilder;
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Literal message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Map : pb::IMessage<Map>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Map> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.Literal.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Map() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Map(Map other) : this() {
              keyValues_ = other.keyValues_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Map Clone() {
              return new Map(this);
            }

            /// <summary>Field number for the "key_values" field.</summary>
            public const int KeyValuesFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression.Types.Literal.Types.Map.Types.KeyValue> _repeated_keyValues_codec
                = pb::FieldCodec.ForMessage(10, global::Substrait.Protobuf.Expression.Types.Literal.Types.Map.Types.KeyValue.Parser);
            private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.Literal.Types.Map.Types.KeyValue> keyValues_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.Literal.Types.Map.Types.KeyValue>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.Literal.Types.Map.Types.KeyValue> KeyValues {
              get { return keyValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Map);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Map other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!keyValues_.Equals(other.keyValues_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= keyValues_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              keyValues_.WriteTo(output, _repeated_keyValues_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              keyValues_.WriteTo(ref output, _repeated_keyValues_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += keyValues_.CalculateSize(_repeated_keyValues_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Map other) {
              if (other == null) {
                return;
              }
              keyValues_.Add(other.keyValues_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    keyValues_.AddEntriesFrom(input, _repeated_keyValues_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    keyValues_.AddEntriesFrom(ref input, _repeated_keyValues_codec);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the Map message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class KeyValue : pb::IMessage<KeyValue>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<KeyValue> _parser = new pb::MessageParser<KeyValue>(() => new KeyValue());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<KeyValue> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Substrait.Protobuf.Expression.Types.Literal.Types.Map.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public KeyValue() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public KeyValue(KeyValue other) : this() {
                  key_ = other.key_ != null ? other.key_.Clone() : null;
                  value_ = other.value_ != null ? other.value_.Clone() : null;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public KeyValue Clone() {
                  return new KeyValue(this);
                }

                /// <summary>Field number for the "key" field.</summary>
                public const int KeyFieldNumber = 1;
                private global::Substrait.Protobuf.Expression.Types.Literal key_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Substrait.Protobuf.Expression.Types.Literal Key {
                  get { return key_; }
                  set {
                    key_ = value;
                  }
                }

                /// <summary>Field number for the "value" field.</summary>
                public const int ValueFieldNumber = 2;
                private global::Substrait.Protobuf.Expression.Types.Literal value_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Substrait.Protobuf.Expression.Types.Literal Value {
                  get { return value_; }
                  set {
                    value_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as KeyValue);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(KeyValue other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Key, other.Key)) return false;
                  if (!object.Equals(Value, other.Value)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (key_ != null) hash ^= Key.GetHashCode();
                  if (value_ != null) hash ^= Value.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (key_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Key);
                  }
                  if (value_ != null) {
                    output.WriteRawTag(18);
                    output.WriteMessage(Value);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (key_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Key);
                  }
                  if (value_ != null) {
                    output.WriteRawTag(18);
                    output.WriteMessage(Value);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (key_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
                  }
                  if (value_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(KeyValue other) {
                  if (other == null) {
                    return;
                  }
                  if (other.key_ != null) {
                    if (key_ == null) {
                      Key = new global::Substrait.Protobuf.Expression.Types.Literal();
                    }
                    Key.MergeFrom(other.Key);
                  }
                  if (other.value_ != null) {
                    if (value_ == null) {
                      Value = new global::Substrait.Protobuf.Expression.Types.Literal();
                    }
                    Value.MergeFrom(other.Value);
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        if (key_ == null) {
                          Key = new global::Substrait.Protobuf.Expression.Types.Literal();
                        }
                        input.ReadMessage(Key);
                        break;
                      }
                      case 18: {
                        if (value_ == null) {
                          Value = new global::Substrait.Protobuf.Expression.Types.Literal();
                        }
                        input.ReadMessage(Value);
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        if (key_ == null) {
                          Key = new global::Substrait.Protobuf.Expression.Types.Literal();
                        }
                        input.ReadMessage(Key);
                        break;
                      }
                      case 18: {
                        if (value_ == null) {
                          Value = new global::Substrait.Protobuf.Expression.Types.Literal();
                        }
                        input.ReadMessage(Value);
                        break;
                      }
                    }
                  }
                }
                #endif

              }

            }
            #endregion

          }

          public sealed partial class IntervalYearToMonth : pb::IMessage<IntervalYearToMonth>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<IntervalYearToMonth> _parser = new pb::MessageParser<IntervalYearToMonth>(() => new IntervalYearToMonth());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<IntervalYearToMonth> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.Literal.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IntervalYearToMonth() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IntervalYearToMonth(IntervalYearToMonth other) : this() {
              years_ = other.years_;
              months_ = other.months_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IntervalYearToMonth Clone() {
              return new IntervalYearToMonth(this);
            }

            /// <summary>Field number for the "years" field.</summary>
            public const int YearsFieldNumber = 1;
            private int years_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Years {
              get { return years_; }
              set {
                years_ = value;
              }
            }

            /// <summary>Field number for the "months" field.</summary>
            public const int MonthsFieldNumber = 2;
            private int months_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Months {
              get { return months_; }
              set {
                months_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as IntervalYearToMonth);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(IntervalYearToMonth other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Years != other.Years) return false;
              if (Months != other.Months) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Years != 0) hash ^= Years.GetHashCode();
              if (Months != 0) hash ^= Months.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Years != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Years);
              }
              if (Months != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Months);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Years != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Years);
              }
              if (Months != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Months);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Years != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Years);
              }
              if (Months != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Months);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(IntervalYearToMonth other) {
              if (other == null) {
                return;
              }
              if (other.Years != 0) {
                Years = other.Years;
              }
              if (other.Months != 0) {
                Months = other.Months;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Years = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Months = input.ReadInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Years = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Months = input.ReadInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class IntervalDayToSecond : pb::IMessage<IntervalDayToSecond>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<IntervalDayToSecond> _parser = new pb::MessageParser<IntervalDayToSecond>(() => new IntervalDayToSecond());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<IntervalDayToSecond> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.Literal.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IntervalDayToSecond() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IntervalDayToSecond(IntervalDayToSecond other) : this() {
              days_ = other.days_;
              seconds_ = other.seconds_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IntervalDayToSecond Clone() {
              return new IntervalDayToSecond(this);
            }

            /// <summary>Field number for the "days" field.</summary>
            public const int DaysFieldNumber = 1;
            private int days_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Days {
              get { return days_; }
              set {
                days_ = value;
              }
            }

            /// <summary>Field number for the "seconds" field.</summary>
            public const int SecondsFieldNumber = 2;
            private int seconds_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Seconds {
              get { return seconds_; }
              set {
                seconds_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as IntervalDayToSecond);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(IntervalDayToSecond other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Days != other.Days) return false;
              if (Seconds != other.Seconds) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Days != 0) hash ^= Days.GetHashCode();
              if (Seconds != 0) hash ^= Seconds.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Days != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Days);
              }
              if (Seconds != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Seconds);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Days != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Days);
              }
              if (Seconds != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Seconds);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Days != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Days);
              }
              if (Seconds != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(IntervalDayToSecond other) {
              if (other == null) {
                return;
              }
              if (other.Days != 0) {
                Days = other.Days;
              }
              if (other.Seconds != 0) {
                Seconds = other.Seconds;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Days = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Seconds = input.ReadInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Days = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Seconds = input.ReadInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class Struct : pb::IMessage<Struct>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Struct> _parser = new pb::MessageParser<Struct>(() => new Struct());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Struct> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.Literal.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Struct() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Struct(Struct other) : this() {
              fields_ = other.fields_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Struct Clone() {
              return new Struct(this);
            }

            /// <summary>Field number for the "fields" field.</summary>
            public const int FieldsFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression.Types.Literal> _repeated_fields_codec
                = pb::FieldCodec.ForMessage(10, global::Substrait.Protobuf.Expression.Types.Literal.Parser);
            private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.Literal> fields_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.Literal>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.Literal> Fields {
              get { return fields_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Struct);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Struct other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!fields_.Equals(other.fields_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= fields_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              fields_.WriteTo(output, _repeated_fields_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              fields_.WriteTo(ref output, _repeated_fields_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += fields_.CalculateSize(_repeated_fields_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Struct other) {
              if (other == null) {
                return;
              }
              fields_.Add(other.fields_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    fields_.AddEntriesFrom(input, _repeated_fields_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    fields_.AddEntriesFrom(ref input, _repeated_fields_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      public sealed partial class ScalarFunction : pb::IMessage<ScalarFunction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ScalarFunction> _parser = new pb::MessageParser<ScalarFunction>(() => new ScalarFunction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ScalarFunction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScalarFunction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScalarFunction(ScalarFunction other) : this() {
          id_ = other.id_ != null ? other.id_.Clone() : null;
          args_ = other.args_.Clone();
          outputType_ = other.outputType_ != null ? other.outputType_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScalarFunction Clone() {
          return new ScalarFunction(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private global::Substrait.Protobuf.Extensions.Types.FunctionId id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Extensions.Types.FunctionId Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Substrait.Protobuf.Expression.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression> args_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression> Args {
          get { return args_; }
        }

        /// <summary>Field number for the "output_type" field.</summary>
        public const int OutputTypeFieldNumber = 3;
        private global::Substrait.Protobuf.Type outputType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Type OutputType {
          get { return outputType_; }
          set {
            outputType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ScalarFunction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ScalarFunction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Id, other.Id)) return false;
          if(!args_.Equals(other.args_)) return false;
          if (!object.Equals(OutputType, other.OutputType)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (id_ != null) hash ^= Id.GetHashCode();
          hash ^= args_.GetHashCode();
          if (outputType_ != null) hash ^= OutputType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (id_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Id);
          }
          args_.WriteTo(output, _repeated_args_codec);
          if (outputType_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(OutputType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (id_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Id);
          }
          args_.WriteTo(ref output, _repeated_args_codec);
          if (outputType_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(OutputType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (id_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          if (outputType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ScalarFunction other) {
          if (other == null) {
            return;
          }
          if (other.id_ != null) {
            if (id_ == null) {
              Id = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
            }
            Id.MergeFrom(other.Id);
          }
          args_.Add(other.args_);
          if (other.outputType_ != null) {
            if (outputType_ == null) {
              OutputType = new global::Substrait.Protobuf.Type();
            }
            OutputType.MergeFrom(other.OutputType);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (id_ == null) {
                  Id = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                }
                input.ReadMessage(Id);
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
              case 26: {
                if (outputType_ == null) {
                  OutputType = new global::Substrait.Protobuf.Type();
                }
                input.ReadMessage(OutputType);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (id_ == null) {
                  Id = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                }
                input.ReadMessage(Id);
                break;
              }
              case 18: {
                args_.AddEntriesFrom(ref input, _repeated_args_codec);
                break;
              }
              case 26: {
                if (outputType_ == null) {
                  OutputType = new global::Substrait.Protobuf.Type();
                }
                input.ReadMessage(OutputType);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AggregateFunction : pb::IMessage<AggregateFunction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AggregateFunction> _parser = new pb::MessageParser<AggregateFunction>(() => new AggregateFunction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AggregateFunction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AggregateFunction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AggregateFunction(AggregateFunction other) : this() {
          id_ = other.id_ != null ? other.id_.Clone() : null;
          args_ = other.args_.Clone();
          sorts_ = other.sorts_.Clone();
          phase_ = other.phase_;
          outputType_ = other.outputType_ != null ? other.outputType_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AggregateFunction Clone() {
          return new AggregateFunction(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private global::Substrait.Protobuf.Extensions.Types.FunctionId id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Extensions.Types.FunctionId Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Substrait.Protobuf.Expression.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression> args_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression> Args {
          get { return args_; }
        }

        /// <summary>Field number for the "sorts" field.</summary>
        public const int SortsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression.Types.SortField> _repeated_sorts_codec
            = pb::FieldCodec.ForMessage(26, global::Substrait.Protobuf.Expression.Types.SortField.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.SortField> sorts_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.SortField>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.SortField> Sorts {
          get { return sorts_; }
        }

        /// <summary>Field number for the "phase" field.</summary>
        public const int PhaseFieldNumber = 4;
        private global::Substrait.Protobuf.Expression.Types.AggregationPhase phase_ = global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.AggregationPhase Phase {
          get { return phase_; }
          set {
            phase_ = value;
          }
        }

        /// <summary>Field number for the "output_type" field.</summary>
        public const int OutputTypeFieldNumber = 5;
        private global::Substrait.Protobuf.Type outputType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Type OutputType {
          get { return outputType_; }
          set {
            outputType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AggregateFunction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AggregateFunction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Id, other.Id)) return false;
          if(!args_.Equals(other.args_)) return false;
          if(!sorts_.Equals(other.sorts_)) return false;
          if (Phase != other.Phase) return false;
          if (!object.Equals(OutputType, other.OutputType)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (id_ != null) hash ^= Id.GetHashCode();
          hash ^= args_.GetHashCode();
          hash ^= sorts_.GetHashCode();
          if (Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) hash ^= Phase.GetHashCode();
          if (outputType_ != null) hash ^= OutputType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (id_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Id);
          }
          args_.WriteTo(output, _repeated_args_codec);
          sorts_.WriteTo(output, _repeated_sorts_codec);
          if (Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Phase);
          }
          if (outputType_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(OutputType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (id_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Id);
          }
          args_.WriteTo(ref output, _repeated_args_codec);
          sorts_.WriteTo(ref output, _repeated_sorts_codec);
          if (Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Phase);
          }
          if (outputType_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(OutputType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (id_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          size += sorts_.CalculateSize(_repeated_sorts_codec);
          if (Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
          }
          if (outputType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AggregateFunction other) {
          if (other == null) {
            return;
          }
          if (other.id_ != null) {
            if (id_ == null) {
              Id = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
            }
            Id.MergeFrom(other.Id);
          }
          args_.Add(other.args_);
          sorts_.Add(other.sorts_);
          if (other.Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) {
            Phase = other.Phase;
          }
          if (other.outputType_ != null) {
            if (outputType_ == null) {
              OutputType = new global::Substrait.Protobuf.Type();
            }
            OutputType.MergeFrom(other.OutputType);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (id_ == null) {
                  Id = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                }
                input.ReadMessage(Id);
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
              case 26: {
                sorts_.AddEntriesFrom(input, _repeated_sorts_codec);
                break;
              }
              case 32: {
                Phase = (global::Substrait.Protobuf.Expression.Types.AggregationPhase) input.ReadEnum();
                break;
              }
              case 42: {
                if (outputType_ == null) {
                  OutputType = new global::Substrait.Protobuf.Type();
                }
                input.ReadMessage(OutputType);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (id_ == null) {
                  Id = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                }
                input.ReadMessage(Id);
                break;
              }
              case 18: {
                args_.AddEntriesFrom(ref input, _repeated_args_codec);
                break;
              }
              case 26: {
                sorts_.AddEntriesFrom(ref input, _repeated_sorts_codec);
                break;
              }
              case 32: {
                Phase = (global::Substrait.Protobuf.Expression.Types.AggregationPhase) input.ReadEnum();
                break;
              }
              case 42: {
                if (outputType_ == null) {
                  OutputType = new global::Substrait.Protobuf.Type();
                }
                input.ReadMessage(OutputType);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class WindowFunction : pb::IMessage<WindowFunction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<WindowFunction> _parser = new pb::MessageParser<WindowFunction>(() => new WindowFunction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WindowFunction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WindowFunction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WindowFunction(WindowFunction other) : this() {
          id_ = other.id_ != null ? other.id_.Clone() : null;
          partitions_ = other.partitions_.Clone();
          sorts_ = other.sorts_.Clone();
          upperBound_ = other.upperBound_ != null ? other.upperBound_.Clone() : null;
          lowerBound_ = other.lowerBound_ != null ? other.lowerBound_.Clone() : null;
          phase_ = other.phase_;
          outputType_ = other.outputType_ != null ? other.outputType_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WindowFunction Clone() {
          return new WindowFunction(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private global::Substrait.Protobuf.Extensions.Types.FunctionId id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Extensions.Types.FunctionId Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "partitions" field.</summary>
        public const int PartitionsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression> _repeated_partitions_codec
            = pb::FieldCodec.ForMessage(18, global::Substrait.Protobuf.Expression.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression> partitions_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression> Partitions {
          get { return partitions_; }
        }

        /// <summary>Field number for the "sorts" field.</summary>
        public const int SortsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression.Types.SortField> _repeated_sorts_codec
            = pb::FieldCodec.ForMessage(26, global::Substrait.Protobuf.Expression.Types.SortField.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.SortField> sorts_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.SortField>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.SortField> Sorts {
          get { return sorts_; }
        }

        /// <summary>Field number for the "upper_bound" field.</summary>
        public const int UpperBoundFieldNumber = 4;
        private global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound upperBound_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound UpperBound {
          get { return upperBound_; }
          set {
            upperBound_ = value;
          }
        }

        /// <summary>Field number for the "lower_bound" field.</summary>
        public const int LowerBoundFieldNumber = 5;
        private global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound lowerBound_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound LowerBound {
          get { return lowerBound_; }
          set {
            lowerBound_ = value;
          }
        }

        /// <summary>Field number for the "phase" field.</summary>
        public const int PhaseFieldNumber = 6;
        private global::Substrait.Protobuf.Expression.Types.AggregationPhase phase_ = global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.AggregationPhase Phase {
          get { return phase_; }
          set {
            phase_ = value;
          }
        }

        /// <summary>Field number for the "output_type" field.</summary>
        public const int OutputTypeFieldNumber = 7;
        private global::Substrait.Protobuf.Type outputType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Type OutputType {
          get { return outputType_; }
          set {
            outputType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WindowFunction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WindowFunction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Id, other.Id)) return false;
          if(!partitions_.Equals(other.partitions_)) return false;
          if(!sorts_.Equals(other.sorts_)) return false;
          if (!object.Equals(UpperBound, other.UpperBound)) return false;
          if (!object.Equals(LowerBound, other.LowerBound)) return false;
          if (Phase != other.Phase) return false;
          if (!object.Equals(OutputType, other.OutputType)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (id_ != null) hash ^= Id.GetHashCode();
          hash ^= partitions_.GetHashCode();
          hash ^= sorts_.GetHashCode();
          if (upperBound_ != null) hash ^= UpperBound.GetHashCode();
          if (lowerBound_ != null) hash ^= LowerBound.GetHashCode();
          if (Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) hash ^= Phase.GetHashCode();
          if (outputType_ != null) hash ^= OutputType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (id_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Id);
          }
          partitions_.WriteTo(output, _repeated_partitions_codec);
          sorts_.WriteTo(output, _repeated_sorts_codec);
          if (upperBound_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(UpperBound);
          }
          if (lowerBound_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(LowerBound);
          }
          if (Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) {
            output.WriteRawTag(48);
            output.WriteEnum((int) Phase);
          }
          if (outputType_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(OutputType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (id_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Id);
          }
          partitions_.WriteTo(ref output, _repeated_partitions_codec);
          sorts_.WriteTo(ref output, _repeated_sorts_codec);
          if (upperBound_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(UpperBound);
          }
          if (lowerBound_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(LowerBound);
          }
          if (Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) {
            output.WriteRawTag(48);
            output.WriteEnum((int) Phase);
          }
          if (outputType_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(OutputType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (id_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
          }
          size += partitions_.CalculateSize(_repeated_partitions_codec);
          size += sorts_.CalculateSize(_repeated_sorts_codec);
          if (upperBound_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpperBound);
          }
          if (lowerBound_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LowerBound);
          }
          if (Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
          }
          if (outputType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WindowFunction other) {
          if (other == null) {
            return;
          }
          if (other.id_ != null) {
            if (id_ == null) {
              Id = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
            }
            Id.MergeFrom(other.Id);
          }
          partitions_.Add(other.partitions_);
          sorts_.Add(other.sorts_);
          if (other.upperBound_ != null) {
            if (upperBound_ == null) {
              UpperBound = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound();
            }
            UpperBound.MergeFrom(other.UpperBound);
          }
          if (other.lowerBound_ != null) {
            if (lowerBound_ == null) {
              LowerBound = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound();
            }
            LowerBound.MergeFrom(other.LowerBound);
          }
          if (other.Phase != global::Substrait.Protobuf.Expression.Types.AggregationPhase.Unknown) {
            Phase = other.Phase;
          }
          if (other.outputType_ != null) {
            if (outputType_ == null) {
              OutputType = new global::Substrait.Protobuf.Type();
            }
            OutputType.MergeFrom(other.OutputType);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (id_ == null) {
                  Id = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                }
                input.ReadMessage(Id);
                break;
              }
              case 18: {
                partitions_.AddEntriesFrom(input, _repeated_partitions_codec);
                break;
              }
              case 26: {
                sorts_.AddEntriesFrom(input, _repeated_sorts_codec);
                break;
              }
              case 34: {
                if (upperBound_ == null) {
                  UpperBound = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound();
                }
                input.ReadMessage(UpperBound);
                break;
              }
              case 42: {
                if (lowerBound_ == null) {
                  LowerBound = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound();
                }
                input.ReadMessage(LowerBound);
                break;
              }
              case 48: {
                Phase = (global::Substrait.Protobuf.Expression.Types.AggregationPhase) input.ReadEnum();
                break;
              }
              case 58: {
                if (outputType_ == null) {
                  OutputType = new global::Substrait.Protobuf.Type();
                }
                input.ReadMessage(OutputType);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (id_ == null) {
                  Id = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                }
                input.ReadMessage(Id);
                break;
              }
              case 18: {
                partitions_.AddEntriesFrom(ref input, _repeated_partitions_codec);
                break;
              }
              case 26: {
                sorts_.AddEntriesFrom(ref input, _repeated_sorts_codec);
                break;
              }
              case 34: {
                if (upperBound_ == null) {
                  UpperBound = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound();
                }
                input.ReadMessage(UpperBound);
                break;
              }
              case 42: {
                if (lowerBound_ == null) {
                  LowerBound = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound();
                }
                input.ReadMessage(LowerBound);
                break;
              }
              case 48: {
                Phase = (global::Substrait.Protobuf.Expression.Types.AggregationPhase) input.ReadEnum();
                break;
              }
              case 58: {
                if (outputType_ == null) {
                  OutputType = new global::Substrait.Protobuf.Type();
                }
                input.ReadMessage(OutputType);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the WindowFunction message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Bound : pb::IMessage<Bound>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Bound> _parser = new pb::MessageParser<Bound>(() => new Bound());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Bound> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.WindowFunction.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Bound() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Bound(Bound other) : this() {
              switch (other.KindCase) {
                case KindOneofCase.Preceding:
                  Preceding = other.Preceding.Clone();
                  break;
                case KindOneofCase.Following:
                  Following = other.Following.Clone();
                  break;
                case KindOneofCase.CurrentRow:
                  CurrentRow = other.CurrentRow.Clone();
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Bound Clone() {
              return new Bound(this);
            }

            /// <summary>Field number for the "preceding" field.</summary>
            public const int PrecedingFieldNumber = 1;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Preceding Preceding {
              get { return kindCase_ == KindOneofCase.Preceding ? (global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Preceding) kind_ : null; }
              set {
                kind_ = value;
                kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Preceding;
              }
            }

            /// <summary>Field number for the "following" field.</summary>
            public const int FollowingFieldNumber = 2;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Following Following {
              get { return kindCase_ == KindOneofCase.Following ? (global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Following) kind_ : null; }
              set {
                kind_ = value;
                kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Following;
              }
            }

            /// <summary>Field number for the "current_row" field.</summary>
            public const int CurrentRowFieldNumber = 3;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.CurrentRow CurrentRow {
              get { return kindCase_ == KindOneofCase.CurrentRow ? (global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.CurrentRow) kind_ : null; }
              set {
                kind_ = value;
                kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.CurrentRow;
              }
            }

            private object kind_;
            /// <summary>Enum of possible cases for the "kind" oneof.</summary>
            public enum KindOneofCase {
              None = 0,
              Preceding = 1,
              Following = 2,
              CurrentRow = 3,
            }
            private KindOneofCase kindCase_ = KindOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KindOneofCase KindCase {
              get { return kindCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearKind() {
              kindCase_ = KindOneofCase.None;
              kind_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Bound);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Bound other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Preceding, other.Preceding)) return false;
              if (!object.Equals(Following, other.Following)) return false;
              if (!object.Equals(CurrentRow, other.CurrentRow)) return false;
              if (KindCase != other.KindCase) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (kindCase_ == KindOneofCase.Preceding) hash ^= Preceding.GetHashCode();
              if (kindCase_ == KindOneofCase.Following) hash ^= Following.GetHashCode();
              if (kindCase_ == KindOneofCase.CurrentRow) hash ^= CurrentRow.GetHashCode();
              hash ^= (int) kindCase_;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (kindCase_ == KindOneofCase.Preceding) {
                output.WriteRawTag(10);
                output.WriteMessage(Preceding);
              }
              if (kindCase_ == KindOneofCase.Following) {
                output.WriteRawTag(18);
                output.WriteMessage(Following);
              }
              if (kindCase_ == KindOneofCase.CurrentRow) {
                output.WriteRawTag(26);
                output.WriteMessage(CurrentRow);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (kindCase_ == KindOneofCase.Preceding) {
                output.WriteRawTag(10);
                output.WriteMessage(Preceding);
              }
              if (kindCase_ == KindOneofCase.Following) {
                output.WriteRawTag(18);
                output.WriteMessage(Following);
              }
              if (kindCase_ == KindOneofCase.CurrentRow) {
                output.WriteRawTag(26);
                output.WriteMessage(CurrentRow);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (kindCase_ == KindOneofCase.Preceding) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Preceding);
              }
              if (kindCase_ == KindOneofCase.Following) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Following);
              }
              if (kindCase_ == KindOneofCase.CurrentRow) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentRow);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Bound other) {
              if (other == null) {
                return;
              }
              switch (other.KindCase) {
                case KindOneofCase.Preceding:
                  if (Preceding == null) {
                    Preceding = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Preceding();
                  }
                  Preceding.MergeFrom(other.Preceding);
                  break;
                case KindOneofCase.Following:
                  if (Following == null) {
                    Following = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Following();
                  }
                  Following.MergeFrom(other.Following);
                  break;
                case KindOneofCase.CurrentRow:
                  if (CurrentRow == null) {
                    CurrentRow = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.CurrentRow();
                  }
                  CurrentRow.MergeFrom(other.CurrentRow);
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Preceding subBuilder = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Preceding();
                    if (kindCase_ == KindOneofCase.Preceding) {
                      subBuilder.MergeFrom(Preceding);
                    }
                    input.ReadMessage(subBuilder);
                    Preceding = subBuilder;
                    break;
                  }
                  case 18: {
                    global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Following subBuilder = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Following();
                    if (kindCase_ == KindOneofCase.Following) {
                      subBuilder.MergeFrom(Following);
                    }
                    input.ReadMessage(subBuilder);
                    Following = subBuilder;
                    break;
                  }
                  case 26: {
                    global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.CurrentRow subBuilder = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.CurrentRow();
                    if (kindCase_ == KindOneofCase.CurrentRow) {
                      subBuilder.MergeFrom(CurrentRow);
                    }
                    input.ReadMessage(subBuilder);
                    CurrentRow = subBuilder;
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Preceding subBuilder = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Preceding();
                    if (kindCase_ == KindOneofCase.Preceding) {
                      subBuilder.MergeFrom(Preceding);
                    }
                    input.ReadMessage(subBuilder);
                    Preceding = subBuilder;
                    break;
                  }
                  case 18: {
                    global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Following subBuilder = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.Following();
                    if (kindCase_ == KindOneofCase.Following) {
                      subBuilder.MergeFrom(Following);
                    }
                    input.ReadMessage(subBuilder);
                    Following = subBuilder;
                    break;
                  }
                  case 26: {
                    global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.CurrentRow subBuilder = new global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Types.CurrentRow();
                    if (kindCase_ == KindOneofCase.CurrentRow) {
                      subBuilder.MergeFrom(CurrentRow);
                    }
                    input.ReadMessage(subBuilder);
                    CurrentRow = subBuilder;
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the Bound message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class Preceding : pb::IMessage<Preceding>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<Preceding> _parser = new pb::MessageParser<Preceding>(() => new Preceding());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Preceding> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Preceding() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Preceding(Preceding other) : this() {
                  offset_ = other.offset_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Preceding Clone() {
                  return new Preceding(this);
                }

                /// <summary>Field number for the "offset" field.</summary>
                public const int OffsetFieldNumber = 1;
                private long offset_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Offset {
                  get { return offset_; }
                  set {
                    offset_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Preceding);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Preceding other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Offset != other.Offset) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Offset != 0L) hash ^= Offset.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (Offset != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(Offset);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (Offset != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(Offset);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Offset != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Preceding other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Offset != 0L) {
                    Offset = other.Offset;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        Offset = input.ReadInt64();
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 8: {
                        Offset = input.ReadInt64();
                        break;
                      }
                    }
                  }
                }
                #endif

              }

              public sealed partial class Following : pb::IMessage<Following>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<Following> _parser = new pb::MessageParser<Following>(() => new Following());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Following> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Following() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Following(Following other) : this() {
                  offset_ = other.offset_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Following Clone() {
                  return new Following(this);
                }

                /// <summary>Field number for the "offset" field.</summary>
                public const int OffsetFieldNumber = 1;
                private long offset_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Offset {
                  get { return offset_; }
                  set {
                    offset_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Following);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Following other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Offset != other.Offset) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Offset != 0L) hash ^= Offset.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (Offset != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(Offset);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (Offset != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(Offset);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Offset != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Following other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Offset != 0L) {
                    Offset = other.Offset;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        Offset = input.ReadInt64();
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 8: {
                        Offset = input.ReadInt64();
                        break;
                      }
                    }
                  }
                }
                #endif

              }

              public sealed partial class CurrentRow : pb::IMessage<CurrentRow>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<CurrentRow> _parser = new pb::MessageParser<CurrentRow>(() => new CurrentRow());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<CurrentRow> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Substrait.Protobuf.Expression.Types.WindowFunction.Types.Bound.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CurrentRow() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CurrentRow(CurrentRow other) : this() {
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CurrentRow Clone() {
                  return new CurrentRow(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as CurrentRow);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(CurrentRow other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(CurrentRow other) {
                  if (other == null) {
                    return;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    }
                  }
                }
                #endif

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class SortField : pb::IMessage<SortField>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SortField> _parser = new pb::MessageParser<SortField>(() => new SortField());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SortField> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortField() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortField(SortField other) : this() {
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          switch (other.SortKindCase) {
            case SortKindOneofCase.Formal:
              Formal = other.Formal;
              break;
            case SortKindOneofCase.ComparisonFunction:
              ComparisonFunction = other.ComparisonFunction.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortField Clone() {
          return new SortField(this);
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 1;
        private global::Substrait.Protobuf.Expression expr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        /// <summary>Field number for the "formal" field.</summary>
        public const int FormalFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.SortField.Types.SortType Formal {
          get { return sortKindCase_ == SortKindOneofCase.Formal ? (global::Substrait.Protobuf.Expression.Types.SortField.Types.SortType) sortKind_ : global::Substrait.Protobuf.Expression.Types.SortField.Types.SortType.Unknown; }
          set {
            sortKind_ = value;
            sortKindCase_ = SortKindOneofCase.Formal;
          }
        }

        /// <summary>Field number for the "comparison_function" field.</summary>
        public const int ComparisonFunctionFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Extensions.Types.FunctionId ComparisonFunction {
          get { return sortKindCase_ == SortKindOneofCase.ComparisonFunction ? (global::Substrait.Protobuf.Extensions.Types.FunctionId) sortKind_ : null; }
          set {
            sortKind_ = value;
            sortKindCase_ = value == null ? SortKindOneofCase.None : SortKindOneofCase.ComparisonFunction;
          }
        }

        private object sortKind_;
        /// <summary>Enum of possible cases for the "sort_kind" oneof.</summary>
        public enum SortKindOneofCase {
          None = 0,
          Formal = 2,
          ComparisonFunction = 3,
        }
        private SortKindOneofCase sortKindCase_ = SortKindOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortKindOneofCase SortKindCase {
          get { return sortKindCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSortKind() {
          sortKindCase_ = SortKindOneofCase.None;
          sortKind_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SortField);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SortField other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Expr, other.Expr)) return false;
          if (Formal != other.Formal) return false;
          if (!object.Equals(ComparisonFunction, other.ComparisonFunction)) return false;
          if (SortKindCase != other.SortKindCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (expr_ != null) hash ^= Expr.GetHashCode();
          if (sortKindCase_ == SortKindOneofCase.Formal) hash ^= Formal.GetHashCode();
          if (sortKindCase_ == SortKindOneofCase.ComparisonFunction) hash ^= ComparisonFunction.GetHashCode();
          hash ^= (int) sortKindCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (expr_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Expr);
          }
          if (sortKindCase_ == SortKindOneofCase.Formal) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Formal);
          }
          if (sortKindCase_ == SortKindOneofCase.ComparisonFunction) {
            output.WriteRawTag(26);
            output.WriteMessage(ComparisonFunction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (expr_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Expr);
          }
          if (sortKindCase_ == SortKindOneofCase.Formal) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Formal);
          }
          if (sortKindCase_ == SortKindOneofCase.ComparisonFunction) {
            output.WriteRawTag(26);
            output.WriteMessage(ComparisonFunction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (sortKindCase_ == SortKindOneofCase.Formal) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Formal);
          }
          if (sortKindCase_ == SortKindOneofCase.ComparisonFunction) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComparisonFunction);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SortField other) {
          if (other == null) {
            return;
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Substrait.Protobuf.Expression();
            }
            Expr.MergeFrom(other.Expr);
          }
          switch (other.SortKindCase) {
            case SortKindOneofCase.Formal:
              Formal = other.Formal;
              break;
            case SortKindOneofCase.ComparisonFunction:
              if (ComparisonFunction == null) {
                ComparisonFunction = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
              }
              ComparisonFunction.MergeFrom(other.ComparisonFunction);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (expr_ == null) {
                  Expr = new global::Substrait.Protobuf.Expression();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 16: {
                sortKind_ = input.ReadEnum();
                sortKindCase_ = SortKindOneofCase.Formal;
                break;
              }
              case 26: {
                global::Substrait.Protobuf.Extensions.Types.FunctionId subBuilder = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                if (sortKindCase_ == SortKindOneofCase.ComparisonFunction) {
                  subBuilder.MergeFrom(ComparisonFunction);
                }
                input.ReadMessage(subBuilder);
                ComparisonFunction = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (expr_ == null) {
                  Expr = new global::Substrait.Protobuf.Expression();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 16: {
                sortKind_ = input.ReadEnum();
                sortKindCase_ = SortKindOneofCase.Formal;
                break;
              }
              case 26: {
                global::Substrait.Protobuf.Extensions.Types.FunctionId subBuilder = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                if (sortKindCase_ == SortKindOneofCase.ComparisonFunction) {
                  subBuilder.MergeFrom(ComparisonFunction);
                }
                input.ReadMessage(subBuilder);
                ComparisonFunction = subBuilder;
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the SortField message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum SortType {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("ASC_NULLS_FIRST")] AscNullsFirst = 1,
            [pbr::OriginalName("ASC_NULLS_LAST")] AscNullsLast = 2,
            [pbr::OriginalName("DESC_NULLS_FIRST")] DescNullsFirst = 3,
            [pbr::OriginalName("DESC_NULLS_LAST")] DescNullsLast = 4,
            [pbr::OriginalName("CLUSTERED")] Clustered = 5,
          }

        }
        #endregion

      }

      public sealed partial class IfThen : pb::IMessage<IfThen>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<IfThen> _parser = new pb::MessageParser<IfThen>(() => new IfThen());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IfThen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IfThen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IfThen(IfThen other) : this() {
          ifs_ = other.ifs_.Clone();
          else_ = other.else_ != null ? other.else_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IfThen Clone() {
          return new IfThen(this);
        }

        /// <summary>Field number for the "ifs" field.</summary>
        public const int IfsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression.Types.IfThen.Types.IfClause> _repeated_ifs_codec
            = pb::FieldCodec.ForMessage(10, global::Substrait.Protobuf.Expression.Types.IfThen.Types.IfClause.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.IfThen.Types.IfClause> ifs_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.IfThen.Types.IfClause>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.IfThen.Types.IfClause> Ifs {
          get { return ifs_; }
        }

        /// <summary>Field number for the "else" field.</summary>
        public const int ElseFieldNumber = 2;
        private global::Substrait.Protobuf.Expression else_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression Else {
          get { return else_; }
          set {
            else_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IfThen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IfThen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!ifs_.Equals(other.ifs_)) return false;
          if (!object.Equals(Else, other.Else)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= ifs_.GetHashCode();
          if (else_ != null) hash ^= Else.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          ifs_.WriteTo(output, _repeated_ifs_codec);
          if (else_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Else);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          ifs_.WriteTo(ref output, _repeated_ifs_codec);
          if (else_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Else);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += ifs_.CalculateSize(_repeated_ifs_codec);
          if (else_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Else);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IfThen other) {
          if (other == null) {
            return;
          }
          ifs_.Add(other.ifs_);
          if (other.else_ != null) {
            if (else_ == null) {
              Else = new global::Substrait.Protobuf.Expression();
            }
            Else.MergeFrom(other.Else);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ifs_.AddEntriesFrom(input, _repeated_ifs_codec);
                break;
              }
              case 18: {
                if (else_ == null) {
                  Else = new global::Substrait.Protobuf.Expression();
                }
                input.ReadMessage(Else);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                ifs_.AddEntriesFrom(ref input, _repeated_ifs_codec);
                break;
              }
              case 18: {
                if (else_ == null) {
                  Else = new global::Substrait.Protobuf.Expression();
                }
                input.ReadMessage(Else);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the IfThen message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class IfClause : pb::IMessage<IfClause>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<IfClause> _parser = new pb::MessageParser<IfClause>(() => new IfClause());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<IfClause> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.IfThen.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IfClause() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IfClause(IfClause other) : this() {
              if_ = other.if_ != null ? other.if_.Clone() : null;
              then_ = other.then_ != null ? other.then_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IfClause Clone() {
              return new IfClause(this);
            }

            /// <summary>Field number for the "if" field.</summary>
            public const int IfFieldNumber = 1;
            private global::Substrait.Protobuf.Expression if_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Expression If {
              get { return if_; }
              set {
                if_ = value;
              }
            }

            /// <summary>Field number for the "then" field.</summary>
            public const int ThenFieldNumber = 2;
            private global::Substrait.Protobuf.Expression then_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Expression Then {
              get { return then_; }
              set {
                then_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as IfClause);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(IfClause other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(If, other.If)) return false;
              if (!object.Equals(Then, other.Then)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (if_ != null) hash ^= If.GetHashCode();
              if (then_ != null) hash ^= Then.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (if_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(If);
              }
              if (then_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Then);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (if_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(If);
              }
              if (then_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Then);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (if_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(If);
              }
              if (then_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Then);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(IfClause other) {
              if (other == null) {
                return;
              }
              if (other.if_ != null) {
                if (if_ == null) {
                  If = new global::Substrait.Protobuf.Expression();
                }
                If.MergeFrom(other.If);
              }
              if (other.then_ != null) {
                if (then_ == null) {
                  Then = new global::Substrait.Protobuf.Expression();
                }
                Then.MergeFrom(other.Then);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (if_ == null) {
                      If = new global::Substrait.Protobuf.Expression();
                    }
                    input.ReadMessage(If);
                    break;
                  }
                  case 18: {
                    if (then_ == null) {
                      Then = new global::Substrait.Protobuf.Expression();
                    }
                    input.ReadMessage(Then);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (if_ == null) {
                      If = new global::Substrait.Protobuf.Expression();
                    }
                    input.ReadMessage(If);
                    break;
                  }
                  case 18: {
                    if (then_ == null) {
                      Then = new global::Substrait.Protobuf.Expression();
                    }
                    input.ReadMessage(Then);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      public sealed partial class SwitchExpression : pb::IMessage<SwitchExpression>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SwitchExpression> _parser = new pb::MessageParser<SwitchExpression>(() => new SwitchExpression());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SwitchExpression> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SwitchExpression() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SwitchExpression(SwitchExpression other) : this() {
          ifs_ = other.ifs_.Clone();
          else_ = other.else_ != null ? other.else_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SwitchExpression Clone() {
          return new SwitchExpression(this);
        }

        /// <summary>Field number for the "ifs" field.</summary>
        public const int IfsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression.Types.SwitchExpression.Types.IfValue> _repeated_ifs_codec
            = pb::FieldCodec.ForMessage(10, global::Substrait.Protobuf.Expression.Types.SwitchExpression.Types.IfValue.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.SwitchExpression.Types.IfValue> ifs_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.SwitchExpression.Types.IfValue>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.SwitchExpression.Types.IfValue> Ifs {
          get { return ifs_; }
        }

        /// <summary>Field number for the "else" field.</summary>
        public const int ElseFieldNumber = 2;
        private global::Substrait.Protobuf.Expression else_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression Else {
          get { return else_; }
          set {
            else_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SwitchExpression);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SwitchExpression other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!ifs_.Equals(other.ifs_)) return false;
          if (!object.Equals(Else, other.Else)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= ifs_.GetHashCode();
          if (else_ != null) hash ^= Else.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          ifs_.WriteTo(output, _repeated_ifs_codec);
          if (else_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Else);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          ifs_.WriteTo(ref output, _repeated_ifs_codec);
          if (else_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Else);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += ifs_.CalculateSize(_repeated_ifs_codec);
          if (else_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Else);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SwitchExpression other) {
          if (other == null) {
            return;
          }
          ifs_.Add(other.ifs_);
          if (other.else_ != null) {
            if (else_ == null) {
              Else = new global::Substrait.Protobuf.Expression();
            }
            Else.MergeFrom(other.Else);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ifs_.AddEntriesFrom(input, _repeated_ifs_codec);
                break;
              }
              case 18: {
                if (else_ == null) {
                  Else = new global::Substrait.Protobuf.Expression();
                }
                input.ReadMessage(Else);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                ifs_.AddEntriesFrom(ref input, _repeated_ifs_codec);
                break;
              }
              case 18: {
                if (else_ == null) {
                  Else = new global::Substrait.Protobuf.Expression();
                }
                input.ReadMessage(Else);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the SwitchExpression message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class IfValue : pb::IMessage<IfValue>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<IfValue> _parser = new pb::MessageParser<IfValue>(() => new IfValue());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<IfValue> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.SwitchExpression.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IfValue() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IfValue(IfValue other) : this() {
              if_ = other.if_ != null ? other.if_.Clone() : null;
              then_ = other.then_ != null ? other.then_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IfValue Clone() {
              return new IfValue(this);
            }

            /// <summary>Field number for the "if" field.</summary>
            public const int IfFieldNumber = 1;
            private global::Substrait.Protobuf.Expression if_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Expression If {
              get { return if_; }
              set {
                if_ = value;
              }
            }

            /// <summary>Field number for the "then" field.</summary>
            public const int ThenFieldNumber = 2;
            private global::Substrait.Protobuf.Expression then_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Expression Then {
              get { return then_; }
              set {
                then_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as IfValue);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(IfValue other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(If, other.If)) return false;
              if (!object.Equals(Then, other.Then)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (if_ != null) hash ^= If.GetHashCode();
              if (then_ != null) hash ^= Then.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (if_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(If);
              }
              if (then_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Then);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (if_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(If);
              }
              if (then_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Then);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (if_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(If);
              }
              if (then_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Then);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(IfValue other) {
              if (other == null) {
                return;
              }
              if (other.if_ != null) {
                if (if_ == null) {
                  If = new global::Substrait.Protobuf.Expression();
                }
                If.MergeFrom(other.If);
              }
              if (other.then_ != null) {
                if (then_ == null) {
                  Then = new global::Substrait.Protobuf.Expression();
                }
                Then.MergeFrom(other.Then);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (if_ == null) {
                      If = new global::Substrait.Protobuf.Expression();
                    }
                    input.ReadMessage(If);
                    break;
                  }
                  case 18: {
                    if (then_ == null) {
                      Then = new global::Substrait.Protobuf.Expression();
                    }
                    input.ReadMessage(Then);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (if_ == null) {
                      If = new global::Substrait.Protobuf.Expression();
                    }
                    input.ReadMessage(If);
                    break;
                  }
                  case 18: {
                    if (then_ == null) {
                      Then = new global::Substrait.Protobuf.Expression();
                    }
                    input.ReadMessage(Then);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      public sealed partial class SingularOrList : pb::IMessage<SingularOrList>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SingularOrList> _parser = new pb::MessageParser<SingularOrList>(() => new SingularOrList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SingularOrList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingularOrList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingularOrList(SingularOrList other) : this() {
          value_ = other.value_ != null ? other.value_.Clone() : null;
          options_ = other.options_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingularOrList Clone() {
          return new SingularOrList(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private global::Substrait.Protobuf.Expression value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "options" field.</summary>
        public const int OptionsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression> _repeated_options_codec
            = pb::FieldCodec.ForMessage(18, global::Substrait.Protobuf.Expression.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression> options_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression> Options {
          get { return options_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SingularOrList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SingularOrList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Value, other.Value)) return false;
          if(!options_.Equals(other.options_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (value_ != null) hash ^= Value.GetHashCode();
          hash ^= options_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (value_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Value);
          }
          options_.WriteTo(output, _repeated_options_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (value_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Value);
          }
          options_.WriteTo(ref output, _repeated_options_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          size += options_.CalculateSize(_repeated_options_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SingularOrList other) {
          if (other == null) {
            return;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              Value = new global::Substrait.Protobuf.Expression();
            }
            Value.MergeFrom(other.Value);
          }
          options_.Add(other.options_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (value_ == null) {
                  Value = new global::Substrait.Protobuf.Expression();
                }
                input.ReadMessage(Value);
                break;
              }
              case 18: {
                options_.AddEntriesFrom(input, _repeated_options_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (value_ == null) {
                  Value = new global::Substrait.Protobuf.Expression();
                }
                input.ReadMessage(Value);
                break;
              }
              case 18: {
                options_.AddEntriesFrom(ref input, _repeated_options_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class MultiOrList : pb::IMessage<MultiOrList>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MultiOrList> _parser = new pb::MessageParser<MultiOrList>(() => new MultiOrList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MultiOrList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MultiOrList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MultiOrList(MultiOrList other) : this() {
          value_ = other.value_.Clone();
          options_ = other.options_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MultiOrList Clone() {
          return new MultiOrList(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression> _repeated_value_codec
            = pb::FieldCodec.ForMessage(10, global::Substrait.Protobuf.Expression.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression> value_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression> Value {
          get { return value_; }
        }

        /// <summary>Field number for the "options" field.</summary>
        public const int OptionsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression.Types.MultiOrList.Types.Record> _repeated_options_codec
            = pb::FieldCodec.ForMessage(18, global::Substrait.Protobuf.Expression.Types.MultiOrList.Types.Record.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.MultiOrList.Types.Record> options_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.MultiOrList.Types.Record>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression.Types.MultiOrList.Types.Record> Options {
          get { return options_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MultiOrList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MultiOrList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!value_.Equals(other.value_)) return false;
          if(!options_.Equals(other.options_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= value_.GetHashCode();
          hash ^= options_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          value_.WriteTo(output, _repeated_value_codec);
          options_.WriteTo(output, _repeated_options_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          value_.WriteTo(ref output, _repeated_value_codec);
          options_.WriteTo(ref output, _repeated_options_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += value_.CalculateSize(_repeated_value_codec);
          size += options_.CalculateSize(_repeated_options_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MultiOrList other) {
          if (other == null) {
            return;
          }
          value_.Add(other.value_);
          options_.Add(other.options_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                value_.AddEntriesFrom(input, _repeated_value_codec);
                break;
              }
              case 18: {
                options_.AddEntriesFrom(input, _repeated_options_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                value_.AddEntriesFrom(ref input, _repeated_value_codec);
                break;
              }
              case 18: {
                options_.AddEntriesFrom(ref input, _repeated_options_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the MultiOrList message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Record : pb::IMessage<Record>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Record> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.MultiOrList.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Record() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Record(Record other) : this() {
              fields_ = other.fields_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Record Clone() {
              return new Record(this);
            }

            /// <summary>Field number for the "fields" field.</summary>
            public const int FieldsFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression> _repeated_fields_codec
                = pb::FieldCodec.ForMessage(10, global::Substrait.Protobuf.Expression.Parser);
            private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression> fields_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Substrait.Protobuf.Expression> Fields {
              get { return fields_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Record);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Record other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!fields_.Equals(other.fields_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= fields_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              fields_.WriteTo(output, _repeated_fields_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              fields_.WriteTo(ref output, _repeated_fields_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += fields_.CalculateSize(_repeated_fields_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Record other) {
              if (other == null) {
                return;
              }
              fields_.Add(other.fields_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    fields_.AddEntriesFrom(input, _repeated_fields_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    fields_.AddEntriesFrom(ref input, _repeated_fields_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      public sealed partial class EmbeddedFunction : pb::IMessage<EmbeddedFunction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<EmbeddedFunction> _parser = new pb::MessageParser<EmbeddedFunction>(() => new EmbeddedFunction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EmbeddedFunction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Expression.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddedFunction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddedFunction(EmbeddedFunction other) : this() {
          arguments_ = other.arguments_.Clone();
          outputType_ = other.outputType_ != null ? other.outputType_.Clone() : null;
          switch (other.KindCase) {
            case KindOneofCase.PythonPickleFunction:
              PythonPickleFunction = other.PythonPickleFunction.Clone();
              break;
            case KindOneofCase.WebAssemblyFunction:
              WebAssemblyFunction = other.WebAssemblyFunction.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddedFunction Clone() {
          return new EmbeddedFunction(this);
        }

        /// <summary>Field number for the "arguments" field.</summary>
        public const int ArgumentsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Substrait.Protobuf.Expression> _repeated_arguments_codec
            = pb::FieldCodec.ForMessage(10, global::Substrait.Protobuf.Expression.Parser);
        private readonly pbc::RepeatedField<global::Substrait.Protobuf.Expression> arguments_ = new pbc::RepeatedField<global::Substrait.Protobuf.Expression>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Substrait.Protobuf.Expression> Arguments {
          get { return arguments_; }
        }

        /// <summary>Field number for the "output_type" field.</summary>
        public const int OutputTypeFieldNumber = 2;
        private global::Substrait.Protobuf.Type outputType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Type OutputType {
          get { return outputType_; }
          set {
            outputType_ = value;
          }
        }

        /// <summary>Field number for the "python_pickle_function" field.</summary>
        public const int PythonPickleFunctionFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.PythonPickleFunction PythonPickleFunction {
          get { return kindCase_ == KindOneofCase.PythonPickleFunction ? (global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.PythonPickleFunction) kind_ : null; }
          set {
            kind_ = value;
            kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.PythonPickleFunction;
          }
        }

        /// <summary>Field number for the "web_assembly_function" field.</summary>
        public const int WebAssemblyFunctionFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.WebAssemblyFunction WebAssemblyFunction {
          get { return kindCase_ == KindOneofCase.WebAssemblyFunction ? (global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.WebAssemblyFunction) kind_ : null; }
          set {
            kind_ = value;
            kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.WebAssemblyFunction;
          }
        }

        private object kind_;
        /// <summary>Enum of possible cases for the "kind" oneof.</summary>
        public enum KindOneofCase {
          None = 0,
          PythonPickleFunction = 3,
          WebAssemblyFunction = 4,
        }
        private KindOneofCase kindCase_ = KindOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KindOneofCase KindCase {
          get { return kindCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKind() {
          kindCase_ = KindOneofCase.None;
          kind_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EmbeddedFunction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EmbeddedFunction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!arguments_.Equals(other.arguments_)) return false;
          if (!object.Equals(OutputType, other.OutputType)) return false;
          if (!object.Equals(PythonPickleFunction, other.PythonPickleFunction)) return false;
          if (!object.Equals(WebAssemblyFunction, other.WebAssemblyFunction)) return false;
          if (KindCase != other.KindCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= arguments_.GetHashCode();
          if (outputType_ != null) hash ^= OutputType.GetHashCode();
          if (kindCase_ == KindOneofCase.PythonPickleFunction) hash ^= PythonPickleFunction.GetHashCode();
          if (kindCase_ == KindOneofCase.WebAssemblyFunction) hash ^= WebAssemblyFunction.GetHashCode();
          hash ^= (int) kindCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          arguments_.WriteTo(output, _repeated_arguments_codec);
          if (outputType_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(OutputType);
          }
          if (kindCase_ == KindOneofCase.PythonPickleFunction) {
            output.WriteRawTag(26);
            output.WriteMessage(PythonPickleFunction);
          }
          if (kindCase_ == KindOneofCase.WebAssemblyFunction) {
            output.WriteRawTag(34);
            output.WriteMessage(WebAssemblyFunction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          arguments_.WriteTo(ref output, _repeated_arguments_codec);
          if (outputType_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(OutputType);
          }
          if (kindCase_ == KindOneofCase.PythonPickleFunction) {
            output.WriteRawTag(26);
            output.WriteMessage(PythonPickleFunction);
          }
          if (kindCase_ == KindOneofCase.WebAssemblyFunction) {
            output.WriteRawTag(34);
            output.WriteMessage(WebAssemblyFunction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += arguments_.CalculateSize(_repeated_arguments_codec);
          if (outputType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputType);
          }
          if (kindCase_ == KindOneofCase.PythonPickleFunction) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PythonPickleFunction);
          }
          if (kindCase_ == KindOneofCase.WebAssemblyFunction) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WebAssemblyFunction);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EmbeddedFunction other) {
          if (other == null) {
            return;
          }
          arguments_.Add(other.arguments_);
          if (other.outputType_ != null) {
            if (outputType_ == null) {
              OutputType = new global::Substrait.Protobuf.Type();
            }
            OutputType.MergeFrom(other.OutputType);
          }
          switch (other.KindCase) {
            case KindOneofCase.PythonPickleFunction:
              if (PythonPickleFunction == null) {
                PythonPickleFunction = new global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.PythonPickleFunction();
              }
              PythonPickleFunction.MergeFrom(other.PythonPickleFunction);
              break;
            case KindOneofCase.WebAssemblyFunction:
              if (WebAssemblyFunction == null) {
                WebAssemblyFunction = new global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.WebAssemblyFunction();
              }
              WebAssemblyFunction.MergeFrom(other.WebAssemblyFunction);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
                break;
              }
              case 18: {
                if (outputType_ == null) {
                  OutputType = new global::Substrait.Protobuf.Type();
                }
                input.ReadMessage(OutputType);
                break;
              }
              case 26: {
                global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.PythonPickleFunction subBuilder = new global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.PythonPickleFunction();
                if (kindCase_ == KindOneofCase.PythonPickleFunction) {
                  subBuilder.MergeFrom(PythonPickleFunction);
                }
                input.ReadMessage(subBuilder);
                PythonPickleFunction = subBuilder;
                break;
              }
              case 34: {
                global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.WebAssemblyFunction subBuilder = new global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.WebAssemblyFunction();
                if (kindCase_ == KindOneofCase.WebAssemblyFunction) {
                  subBuilder.MergeFrom(WebAssemblyFunction);
                }
                input.ReadMessage(subBuilder);
                WebAssemblyFunction = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                arguments_.AddEntriesFrom(ref input, _repeated_arguments_codec);
                break;
              }
              case 18: {
                if (outputType_ == null) {
                  OutputType = new global::Substrait.Protobuf.Type();
                }
                input.ReadMessage(OutputType);
                break;
              }
              case 26: {
                global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.PythonPickleFunction subBuilder = new global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.PythonPickleFunction();
                if (kindCase_ == KindOneofCase.PythonPickleFunction) {
                  subBuilder.MergeFrom(PythonPickleFunction);
                }
                input.ReadMessage(subBuilder);
                PythonPickleFunction = subBuilder;
                break;
              }
              case 34: {
                global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.WebAssemblyFunction subBuilder = new global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Types.WebAssemblyFunction();
                if (kindCase_ == KindOneofCase.WebAssemblyFunction) {
                  subBuilder.MergeFrom(WebAssemblyFunction);
                }
                input.ReadMessage(subBuilder);
                WebAssemblyFunction = subBuilder;
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the EmbeddedFunction message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class PythonPickleFunction : pb::IMessage<PythonPickleFunction>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<PythonPickleFunction> _parser = new pb::MessageParser<PythonPickleFunction>(() => new PythonPickleFunction());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PythonPickleFunction> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PythonPickleFunction() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PythonPickleFunction(PythonPickleFunction other) : this() {
              function_ = other.function_;
              prerequisite_ = other.prerequisite_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PythonPickleFunction Clone() {
              return new PythonPickleFunction(this);
            }

            /// <summary>Field number for the "function" field.</summary>
            public const int FunctionFieldNumber = 1;
            private pb::ByteString function_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString Function {
              get { return function_; }
              set {
                function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "prerequisite" field.</summary>
            public const int PrerequisiteFieldNumber = 2;
            private static readonly pb::FieldCodec<string> _repeated_prerequisite_codec
                = pb::FieldCodec.ForString(18);
            private readonly pbc::RepeatedField<string> prerequisite_ = new pbc::RepeatedField<string>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> Prerequisite {
              get { return prerequisite_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PythonPickleFunction);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PythonPickleFunction other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Function != other.Function) return false;
              if(!prerequisite_.Equals(other.prerequisite_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Function.Length != 0) hash ^= Function.GetHashCode();
              hash ^= prerequisite_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Function.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(Function);
              }
              prerequisite_.WriteTo(output, _repeated_prerequisite_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Function.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(Function);
              }
              prerequisite_.WriteTo(ref output, _repeated_prerequisite_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Function.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Function);
              }
              size += prerequisite_.CalculateSize(_repeated_prerequisite_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PythonPickleFunction other) {
              if (other == null) {
                return;
              }
              if (other.Function.Length != 0) {
                Function = other.Function;
              }
              prerequisite_.Add(other.prerequisite_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Function = input.ReadBytes();
                    break;
                  }
                  case 18: {
                    prerequisite_.AddEntriesFrom(input, _repeated_prerequisite_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    Function = input.ReadBytes();
                    break;
                  }
                  case 18: {
                    prerequisite_.AddEntriesFrom(ref input, _repeated_prerequisite_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class WebAssemblyFunction : pb::IMessage<WebAssemblyFunction>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<WebAssemblyFunction> _parser = new pb::MessageParser<WebAssemblyFunction>(() => new WebAssemblyFunction());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<WebAssemblyFunction> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Expression.Types.EmbeddedFunction.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WebAssemblyFunction() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WebAssemblyFunction(WebAssemblyFunction other) : this() {
              script_ = other.script_;
              prerequisite_ = other.prerequisite_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WebAssemblyFunction Clone() {
              return new WebAssemblyFunction(this);
            }

            /// <summary>Field number for the "script" field.</summary>
            public const int ScriptFieldNumber = 1;
            private pb::ByteString script_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString Script {
              get { return script_; }
              set {
                script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "prerequisite" field.</summary>
            public const int PrerequisiteFieldNumber = 2;
            private static readonly pb::FieldCodec<string> _repeated_prerequisite_codec
                = pb::FieldCodec.ForString(18);
            private readonly pbc::RepeatedField<string> prerequisite_ = new pbc::RepeatedField<string>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> Prerequisite {
              get { return prerequisite_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as WebAssemblyFunction);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(WebAssemblyFunction other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Script != other.Script) return false;
              if(!prerequisite_.Equals(other.prerequisite_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Script.Length != 0) hash ^= Script.GetHashCode();
              hash ^= prerequisite_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Script.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(Script);
              }
              prerequisite_.WriteTo(output, _repeated_prerequisite_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Script.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(Script);
              }
              prerequisite_.WriteTo(ref output, _repeated_prerequisite_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Script.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Script);
              }
              size += prerequisite_.CalculateSize(_repeated_prerequisite_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(WebAssemblyFunction other) {
              if (other == null) {
                return;
              }
              if (other.Script.Length != 0) {
                Script = other.Script;
              }
              prerequisite_.Add(other.prerequisite_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Script = input.ReadBytes();
                    break;
                  }
                  case 18: {
                    prerequisite_.AddEntriesFrom(input, _repeated_prerequisite_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    Script = input.ReadBytes();
                    break;
                  }
                  case 18: {
                    prerequisite_.AddEntriesFrom(ref input, _repeated_prerequisite_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
