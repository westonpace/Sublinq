// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: extensions.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Substrait.Protobuf {

  /// <summary>Holder for reflection information generated from extensions.proto</summary>
  public static partial class ExtensionsReflection {

    #region Descriptor
    /// <summary>File descriptor for extensions.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExtensionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBleHRlbnNpb25zLnByb3RvEgxpby5zdWJzdHJhaXQi7gcKCkV4dGVuc2lv",
            "bnMawQIKCUV4dGVuc2lvbhI6CgxleHRlbnNpb25faWQYASABKAsyJC5pby5z",
            "dWJzdHJhaXQuRXh0ZW5zaW9ucy5FeHRlbnNpb25JZBJKCg50eXBlX2V4dGVu",
            "c2lvbhgCIAEoCzIwLmlvLnN1YnN0cmFpdC5FeHRlbnNpb25zLkV4dGVuc2lv",
            "bi5UeXBlRXh0ZW5zaW9uSAASUgoSZnVuY3Rpb25fZXh0ZW5zaW9uGAMgASgL",
            "MjQuaW8uc3Vic3RyYWl0LkV4dGVuc2lvbnMuRXh0ZW5zaW9uLkZ1bmN0aW9u",
            "RXh0ZW5zaW9uSAAaIAoNVHlwZUV4dGVuc2lvbhIPCgdnaXRfdXJpGAEgASgJ",
            "GiQKEUZ1bmN0aW9uRXh0ZW5zaW9uEg8KB2dpdF91cmkYASABKAlCEAoOZXh0",
            "ZW5zaW9uX3R5cGUa0AQKB01hcHBpbmcSRAoMdHlwZV9tYXBwaW5nGAEgASgL",
            "MiwuaW8uc3Vic3RyYWl0LkV4dGVuc2lvbnMuTWFwcGluZy5UeXBlTWFwcGlu",
            "Z0gAEkwKEGZ1bmN0aW9uX21hcHBpbmcYAiABKAsyMC5pby5zdWJzdHJhaXQu",
            "RXh0ZW5zaW9ucy5NYXBwaW5nLkZ1bmN0aW9uTWFwcGluZ0gAGokBCgtUeXBl",
            "TWFwcGluZxIwCgd0eXBlX2lkGAEgASgLMh8uaW8uc3Vic3RyYWl0LkV4dGVu",
            "c2lvbnMuVHlwZUlkEjoKDGV4dGVuc2lvbl9pZBgCIAEoCzIkLmlvLnN1YnN0",
            "cmFpdC5FeHRlbnNpb25zLkV4dGVuc2lvbklkEgwKBG5hbWUYAyABKAkalAIK",
            "D0Z1bmN0aW9uTWFwcGluZxI4CgtmdW5jdGlvbl9pZBgBIAEoCzIjLmlvLnN1",
            "YnN0cmFpdC5FeHRlbnNpb25zLkZ1bmN0aW9uSWQSOgoMZXh0ZW5zaW9uX2lk",
            "GAIgASgLMiQuaW8uc3Vic3RyYWl0LkV4dGVuc2lvbnMuRXh0ZW5zaW9uSWQS",
            "DAoEbmFtZRgDIAEoCRINCgVpbmRleBgEIAEoDRJICgdvcHRpb25zGAUgAygL",
            "MjcuaW8uc3Vic3RyYWl0LkV4dGVuc2lvbnMuTWFwcGluZy5GdW5jdGlvbk1h",
            "cHBpbmcuT3B0aW9uGiQKBk9wdGlvbhILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAlCDgoMbWFwcGluZ190eXBlGhkKC0V4dGVuc2lvbklkEgoKAmlkGAEg",
            "ASgNGhgKCkZ1bmN0aW9uSWQSCgoCaWQYASABKAQaFAoGVHlwZUlkEgoKAmlk",
            "GAEgASgEQhdQAaoCElN1YnN0cmFpdC5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions), global::Substrait.Protobuf.Extensions.Parser, null, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.Extension), global::Substrait.Protobuf.Extensions.Types.Extension.Parser, new[]{ "ExtensionId", "TypeExtension", "FunctionExtension" }, new[]{ "ExtensionType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.Extension.Types.TypeExtension), global::Substrait.Protobuf.Extensions.Types.Extension.Types.TypeExtension.Parser, new[]{ "GitUri" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.Extension.Types.FunctionExtension), global::Substrait.Protobuf.Extensions.Types.Extension.Types.FunctionExtension.Parser, new[]{ "GitUri" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.Mapping), global::Substrait.Protobuf.Extensions.Types.Mapping.Parser, new[]{ "TypeMapping", "FunctionMapping" }, new[]{ "MappingType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.Mapping.Types.TypeMapping), global::Substrait.Protobuf.Extensions.Types.Mapping.Types.TypeMapping.Parser, new[]{ "TypeId", "ExtensionId", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping), global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping.Parser, new[]{ "FunctionId", "ExtensionId", "Name", "Index", "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping.Types.Option), global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping.Types.Option.Parser, new[]{ "Key", "Value" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.ExtensionId), global::Substrait.Protobuf.Extensions.Types.ExtensionId.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.FunctionId), global::Substrait.Protobuf.Extensions.Types.FunctionId.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Substrait.Protobuf.Extensions.Types.TypeId), global::Substrait.Protobuf.Extensions.Types.TypeId.Parser, new[]{ "Id" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Extensions : pb::IMessage<Extensions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Extensions> _parser = new pb::MessageParser<Extensions>(() => new Extensions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Extensions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Substrait.Protobuf.ExtensionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extensions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extensions(Extensions other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extensions Clone() {
      return new Extensions(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Extensions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Extensions other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Extensions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Extension : pb::IMessage<Extension>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Extension> _parser = new pb::MessageParser<Extension>(() => new Extension());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Extension> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Extensions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extension() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extension(Extension other) : this() {
          extensionId_ = other.extensionId_ != null ? other.extensionId_.Clone() : null;
          switch (other.ExtensionTypeCase) {
            case ExtensionTypeOneofCase.TypeExtension:
              TypeExtension = other.TypeExtension.Clone();
              break;
            case ExtensionTypeOneofCase.FunctionExtension:
              FunctionExtension = other.FunctionExtension.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extension Clone() {
          return new Extension(this);
        }

        /// <summary>Field number for the "extension_id" field.</summary>
        public const int ExtensionIdFieldNumber = 1;
        private global::Substrait.Protobuf.Extensions.Types.ExtensionId extensionId_;
        /// <summary>
        /// unique that describes a particular source for (and type of) extensions.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Extensions.Types.ExtensionId ExtensionId {
          get { return extensionId_; }
          set {
            extensionId_ = value;
          }
        }

        /// <summary>Field number for the "type_extension" field.</summary>
        public const int TypeExtensionFieldNumber = 2;
        /// <summary>
        /// git uri for extension types information
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Extensions.Types.Extension.Types.TypeExtension TypeExtension {
          get { return extensionTypeCase_ == ExtensionTypeOneofCase.TypeExtension ? (global::Substrait.Protobuf.Extensions.Types.Extension.Types.TypeExtension) extensionType_ : null; }
          set {
            extensionType_ = value;
            extensionTypeCase_ = value == null ? ExtensionTypeOneofCase.None : ExtensionTypeOneofCase.TypeExtension;
          }
        }

        /// <summary>Field number for the "function_extension" field.</summary>
        public const int FunctionExtensionFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Extensions.Types.Extension.Types.FunctionExtension FunctionExtension {
          get { return extensionTypeCase_ == ExtensionTypeOneofCase.FunctionExtension ? (global::Substrait.Protobuf.Extensions.Types.Extension.Types.FunctionExtension) extensionType_ : null; }
          set {
            extensionType_ = value;
            extensionTypeCase_ = value == null ? ExtensionTypeOneofCase.None : ExtensionTypeOneofCase.FunctionExtension;
          }
        }

        private object extensionType_;
        /// <summary>Enum of possible cases for the "extension_type" oneof.</summary>
        public enum ExtensionTypeOneofCase {
          None = 0,
          TypeExtension = 2,
          FunctionExtension = 3,
        }
        private ExtensionTypeOneofCase extensionTypeCase_ = ExtensionTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExtensionTypeOneofCase ExtensionTypeCase {
          get { return extensionTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExtensionType() {
          extensionTypeCase_ = ExtensionTypeOneofCase.None;
          extensionType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Extension);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Extension other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ExtensionId, other.ExtensionId)) return false;
          if (!object.Equals(TypeExtension, other.TypeExtension)) return false;
          if (!object.Equals(FunctionExtension, other.FunctionExtension)) return false;
          if (ExtensionTypeCase != other.ExtensionTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (extensionId_ != null) hash ^= ExtensionId.GetHashCode();
          if (extensionTypeCase_ == ExtensionTypeOneofCase.TypeExtension) hash ^= TypeExtension.GetHashCode();
          if (extensionTypeCase_ == ExtensionTypeOneofCase.FunctionExtension) hash ^= FunctionExtension.GetHashCode();
          hash ^= (int) extensionTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (extensionId_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ExtensionId);
          }
          if (extensionTypeCase_ == ExtensionTypeOneofCase.TypeExtension) {
            output.WriteRawTag(18);
            output.WriteMessage(TypeExtension);
          }
          if (extensionTypeCase_ == ExtensionTypeOneofCase.FunctionExtension) {
            output.WriteRawTag(26);
            output.WriteMessage(FunctionExtension);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (extensionId_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ExtensionId);
          }
          if (extensionTypeCase_ == ExtensionTypeOneofCase.TypeExtension) {
            output.WriteRawTag(18);
            output.WriteMessage(TypeExtension);
          }
          if (extensionTypeCase_ == ExtensionTypeOneofCase.FunctionExtension) {
            output.WriteRawTag(26);
            output.WriteMessage(FunctionExtension);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (extensionId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtensionId);
          }
          if (extensionTypeCase_ == ExtensionTypeOneofCase.TypeExtension) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeExtension);
          }
          if (extensionTypeCase_ == ExtensionTypeOneofCase.FunctionExtension) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FunctionExtension);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Extension other) {
          if (other == null) {
            return;
          }
          if (other.extensionId_ != null) {
            if (extensionId_ == null) {
              ExtensionId = new global::Substrait.Protobuf.Extensions.Types.ExtensionId();
            }
            ExtensionId.MergeFrom(other.ExtensionId);
          }
          switch (other.ExtensionTypeCase) {
            case ExtensionTypeOneofCase.TypeExtension:
              if (TypeExtension == null) {
                TypeExtension = new global::Substrait.Protobuf.Extensions.Types.Extension.Types.TypeExtension();
              }
              TypeExtension.MergeFrom(other.TypeExtension);
              break;
            case ExtensionTypeOneofCase.FunctionExtension:
              if (FunctionExtension == null) {
                FunctionExtension = new global::Substrait.Protobuf.Extensions.Types.Extension.Types.FunctionExtension();
              }
              FunctionExtension.MergeFrom(other.FunctionExtension);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (extensionId_ == null) {
                  ExtensionId = new global::Substrait.Protobuf.Extensions.Types.ExtensionId();
                }
                input.ReadMessage(ExtensionId);
                break;
              }
              case 18: {
                global::Substrait.Protobuf.Extensions.Types.Extension.Types.TypeExtension subBuilder = new global::Substrait.Protobuf.Extensions.Types.Extension.Types.TypeExtension();
                if (extensionTypeCase_ == ExtensionTypeOneofCase.TypeExtension) {
                  subBuilder.MergeFrom(TypeExtension);
                }
                input.ReadMessage(subBuilder);
                TypeExtension = subBuilder;
                break;
              }
              case 26: {
                global::Substrait.Protobuf.Extensions.Types.Extension.Types.FunctionExtension subBuilder = new global::Substrait.Protobuf.Extensions.Types.Extension.Types.FunctionExtension();
                if (extensionTypeCase_ == ExtensionTypeOneofCase.FunctionExtension) {
                  subBuilder.MergeFrom(FunctionExtension);
                }
                input.ReadMessage(subBuilder);
                FunctionExtension = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (extensionId_ == null) {
                  ExtensionId = new global::Substrait.Protobuf.Extensions.Types.ExtensionId();
                }
                input.ReadMessage(ExtensionId);
                break;
              }
              case 18: {
                global::Substrait.Protobuf.Extensions.Types.Extension.Types.TypeExtension subBuilder = new global::Substrait.Protobuf.Extensions.Types.Extension.Types.TypeExtension();
                if (extensionTypeCase_ == ExtensionTypeOneofCase.TypeExtension) {
                  subBuilder.MergeFrom(TypeExtension);
                }
                input.ReadMessage(subBuilder);
                TypeExtension = subBuilder;
                break;
              }
              case 26: {
                global::Substrait.Protobuf.Extensions.Types.Extension.Types.FunctionExtension subBuilder = new global::Substrait.Protobuf.Extensions.Types.Extension.Types.FunctionExtension();
                if (extensionTypeCase_ == ExtensionTypeOneofCase.FunctionExtension) {
                  subBuilder.MergeFrom(FunctionExtension);
                }
                input.ReadMessage(subBuilder);
                FunctionExtension = subBuilder;
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Extension message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class TypeExtension : pb::IMessage<TypeExtension>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<TypeExtension> _parser = new pb::MessageParser<TypeExtension>(() => new TypeExtension());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TypeExtension> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Extensions.Types.Extension.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TypeExtension() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TypeExtension(TypeExtension other) : this() {
              gitUri_ = other.gitUri_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TypeExtension Clone() {
              return new TypeExtension(this);
            }

            /// <summary>Field number for the "git_uri" field.</summary>
            public const int GitUriFieldNumber = 1;
            private string gitUri_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string GitUri {
              get { return gitUri_; }
              set {
                gitUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TypeExtension);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TypeExtension other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (GitUri != other.GitUri) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (GitUri.Length != 0) hash ^= GitUri.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (GitUri.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(GitUri);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (GitUri.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(GitUri);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (GitUri.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GitUri);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TypeExtension other) {
              if (other == null) {
                return;
              }
              if (other.GitUri.Length != 0) {
                GitUri = other.GitUri;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    GitUri = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    GitUri = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class FunctionExtension : pb::IMessage<FunctionExtension>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<FunctionExtension> _parser = new pb::MessageParser<FunctionExtension>(() => new FunctionExtension());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<FunctionExtension> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Extensions.Types.Extension.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FunctionExtension() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FunctionExtension(FunctionExtension other) : this() {
              gitUri_ = other.gitUri_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FunctionExtension Clone() {
              return new FunctionExtension(this);
            }

            /// <summary>Field number for the "git_uri" field.</summary>
            public const int GitUriFieldNumber = 1;
            private string gitUri_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string GitUri {
              get { return gitUri_; }
              set {
                gitUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as FunctionExtension);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(FunctionExtension other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (GitUri != other.GitUri) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (GitUri.Length != 0) hash ^= GitUri.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (GitUri.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(GitUri);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (GitUri.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(GitUri);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (GitUri.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GitUri);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(FunctionExtension other) {
              if (other == null) {
                return;
              }
              if (other.GitUri.Length != 0) {
                GitUri = other.GitUri;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    GitUri = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    GitUri = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      public sealed partial class Mapping : pb::IMessage<Mapping>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Mapping> _parser = new pb::MessageParser<Mapping>(() => new Mapping());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mapping> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Extensions.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mapping() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mapping(Mapping other) : this() {
          switch (other.MappingTypeCase) {
            case MappingTypeOneofCase.TypeMapping:
              TypeMapping = other.TypeMapping.Clone();
              break;
            case MappingTypeOneofCase.FunctionMapping:
              FunctionMapping = other.FunctionMapping.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mapping Clone() {
          return new Mapping(this);
        }

        /// <summary>Field number for the "type_mapping" field.</summary>
        public const int TypeMappingFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Extensions.Types.Mapping.Types.TypeMapping TypeMapping {
          get { return mappingTypeCase_ == MappingTypeOneofCase.TypeMapping ? (global::Substrait.Protobuf.Extensions.Types.Mapping.Types.TypeMapping) mappingType_ : null; }
          set {
            mappingType_ = value;
            mappingTypeCase_ = value == null ? MappingTypeOneofCase.None : MappingTypeOneofCase.TypeMapping;
          }
        }

        /// <summary>Field number for the "function_mapping" field.</summary>
        public const int FunctionMappingFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping FunctionMapping {
          get { return mappingTypeCase_ == MappingTypeOneofCase.FunctionMapping ? (global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping) mappingType_ : null; }
          set {
            mappingType_ = value;
            mappingTypeCase_ = value == null ? MappingTypeOneofCase.None : MappingTypeOneofCase.FunctionMapping;
          }
        }

        private object mappingType_;
        /// <summary>Enum of possible cases for the "mapping_type" oneof.</summary>
        public enum MappingTypeOneofCase {
          None = 0,
          TypeMapping = 1,
          FunctionMapping = 2,
        }
        private MappingTypeOneofCase mappingTypeCase_ = MappingTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MappingTypeOneofCase MappingTypeCase {
          get { return mappingTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMappingType() {
          mappingTypeCase_ = MappingTypeOneofCase.None;
          mappingType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mapping);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mapping other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TypeMapping, other.TypeMapping)) return false;
          if (!object.Equals(FunctionMapping, other.FunctionMapping)) return false;
          if (MappingTypeCase != other.MappingTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (mappingTypeCase_ == MappingTypeOneofCase.TypeMapping) hash ^= TypeMapping.GetHashCode();
          if (mappingTypeCase_ == MappingTypeOneofCase.FunctionMapping) hash ^= FunctionMapping.GetHashCode();
          hash ^= (int) mappingTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (mappingTypeCase_ == MappingTypeOneofCase.TypeMapping) {
            output.WriteRawTag(10);
            output.WriteMessage(TypeMapping);
          }
          if (mappingTypeCase_ == MappingTypeOneofCase.FunctionMapping) {
            output.WriteRawTag(18);
            output.WriteMessage(FunctionMapping);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (mappingTypeCase_ == MappingTypeOneofCase.TypeMapping) {
            output.WriteRawTag(10);
            output.WriteMessage(TypeMapping);
          }
          if (mappingTypeCase_ == MappingTypeOneofCase.FunctionMapping) {
            output.WriteRawTag(18);
            output.WriteMessage(FunctionMapping);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (mappingTypeCase_ == MappingTypeOneofCase.TypeMapping) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeMapping);
          }
          if (mappingTypeCase_ == MappingTypeOneofCase.FunctionMapping) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FunctionMapping);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mapping other) {
          if (other == null) {
            return;
          }
          switch (other.MappingTypeCase) {
            case MappingTypeOneofCase.TypeMapping:
              if (TypeMapping == null) {
                TypeMapping = new global::Substrait.Protobuf.Extensions.Types.Mapping.Types.TypeMapping();
              }
              TypeMapping.MergeFrom(other.TypeMapping);
              break;
            case MappingTypeOneofCase.FunctionMapping:
              if (FunctionMapping == null) {
                FunctionMapping = new global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping();
              }
              FunctionMapping.MergeFrom(other.FunctionMapping);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Substrait.Protobuf.Extensions.Types.Mapping.Types.TypeMapping subBuilder = new global::Substrait.Protobuf.Extensions.Types.Mapping.Types.TypeMapping();
                if (mappingTypeCase_ == MappingTypeOneofCase.TypeMapping) {
                  subBuilder.MergeFrom(TypeMapping);
                }
                input.ReadMessage(subBuilder);
                TypeMapping = subBuilder;
                break;
              }
              case 18: {
                global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping subBuilder = new global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping();
                if (mappingTypeCase_ == MappingTypeOneofCase.FunctionMapping) {
                  subBuilder.MergeFrom(FunctionMapping);
                }
                input.ReadMessage(subBuilder);
                FunctionMapping = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Substrait.Protobuf.Extensions.Types.Mapping.Types.TypeMapping subBuilder = new global::Substrait.Protobuf.Extensions.Types.Mapping.Types.TypeMapping();
                if (mappingTypeCase_ == MappingTypeOneofCase.TypeMapping) {
                  subBuilder.MergeFrom(TypeMapping);
                }
                input.ReadMessage(subBuilder);
                TypeMapping = subBuilder;
                break;
              }
              case 18: {
                global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping subBuilder = new global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping();
                if (mappingTypeCase_ == MappingTypeOneofCase.FunctionMapping) {
                  subBuilder.MergeFrom(FunctionMapping);
                }
                input.ReadMessage(subBuilder);
                FunctionMapping = subBuilder;
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Mapping message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class TypeMapping : pb::IMessage<TypeMapping>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<TypeMapping> _parser = new pb::MessageParser<TypeMapping>(() => new TypeMapping());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TypeMapping> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Extensions.Types.Mapping.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TypeMapping() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TypeMapping(TypeMapping other) : this() {
              typeId_ = other.typeId_ != null ? other.typeId_.Clone() : null;
              extensionId_ = other.extensionId_ != null ? other.extensionId_.Clone() : null;
              name_ = other.name_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TypeMapping Clone() {
              return new TypeMapping(this);
            }

            /// <summary>Field number for the "type_id" field.</summary>
            public const int TypeIdFieldNumber = 1;
            private global::Substrait.Protobuf.Extensions.Types.TypeId typeId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Extensions.Types.TypeId TypeId {
              get { return typeId_; }
              set {
                typeId_ = value;
              }
            }

            /// <summary>Field number for the "extension_id" field.</summary>
            public const int ExtensionIdFieldNumber = 2;
            private global::Substrait.Protobuf.Extensions.Types.ExtensionId extensionId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Extensions.Types.ExtensionId ExtensionId {
              get { return extensionId_; }
              set {
                extensionId_ = value;
              }
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 3;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TypeMapping);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TypeMapping other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(TypeId, other.TypeId)) return false;
              if (!object.Equals(ExtensionId, other.ExtensionId)) return false;
              if (Name != other.Name) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (typeId_ != null) hash ^= TypeId.GetHashCode();
              if (extensionId_ != null) hash ^= ExtensionId.GetHashCode();
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (typeId_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(TypeId);
              }
              if (extensionId_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(ExtensionId);
              }
              if (Name.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Name);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (typeId_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(TypeId);
              }
              if (extensionId_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(ExtensionId);
              }
              if (Name.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Name);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (typeId_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeId);
              }
              if (extensionId_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtensionId);
              }
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TypeMapping other) {
              if (other == null) {
                return;
              }
              if (other.typeId_ != null) {
                if (typeId_ == null) {
                  TypeId = new global::Substrait.Protobuf.Extensions.Types.TypeId();
                }
                TypeId.MergeFrom(other.TypeId);
              }
              if (other.extensionId_ != null) {
                if (extensionId_ == null) {
                  ExtensionId = new global::Substrait.Protobuf.Extensions.Types.ExtensionId();
                }
                ExtensionId.MergeFrom(other.ExtensionId);
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (typeId_ == null) {
                      TypeId = new global::Substrait.Protobuf.Extensions.Types.TypeId();
                    }
                    input.ReadMessage(TypeId);
                    break;
                  }
                  case 18: {
                    if (extensionId_ == null) {
                      ExtensionId = new global::Substrait.Protobuf.Extensions.Types.ExtensionId();
                    }
                    input.ReadMessage(ExtensionId);
                    break;
                  }
                  case 26: {
                    Name = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (typeId_ == null) {
                      TypeId = new global::Substrait.Protobuf.Extensions.Types.TypeId();
                    }
                    input.ReadMessage(TypeId);
                    break;
                  }
                  case 18: {
                    if (extensionId_ == null) {
                      ExtensionId = new global::Substrait.Protobuf.Extensions.Types.ExtensionId();
                    }
                    input.ReadMessage(ExtensionId);
                    break;
                  }
                  case 26: {
                    Name = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class FunctionMapping : pb::IMessage<FunctionMapping>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<FunctionMapping> _parser = new pb::MessageParser<FunctionMapping>(() => new FunctionMapping());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<FunctionMapping> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Substrait.Protobuf.Extensions.Types.Mapping.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FunctionMapping() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FunctionMapping(FunctionMapping other) : this() {
              functionId_ = other.functionId_ != null ? other.functionId_.Clone() : null;
              extensionId_ = other.extensionId_ != null ? other.extensionId_.Clone() : null;
              name_ = other.name_;
              index_ = other.index_;
              options_ = other.options_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FunctionMapping Clone() {
              return new FunctionMapping(this);
            }

            /// <summary>Field number for the "function_id" field.</summary>
            public const int FunctionIdFieldNumber = 1;
            private global::Substrait.Protobuf.Extensions.Types.FunctionId functionId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Extensions.Types.FunctionId FunctionId {
              get { return functionId_; }
              set {
                functionId_ = value;
              }
            }

            /// <summary>Field number for the "extension_id" field.</summary>
            public const int ExtensionIdFieldNumber = 2;
            private global::Substrait.Protobuf.Extensions.Types.ExtensionId extensionId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Substrait.Protobuf.Extensions.Types.ExtensionId ExtensionId {
              get { return extensionId_; }
              set {
                extensionId_ = value;
              }
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 3;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "index" field.</summary>
            public const int IndexFieldNumber = 4;
            private uint index_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Index {
              get { return index_; }
              set {
                index_ = value;
              }
            }

            /// <summary>Field number for the "options" field.</summary>
            public const int OptionsFieldNumber = 5;
            private static readonly pb::FieldCodec<global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping.Types.Option> _repeated_options_codec
                = pb::FieldCodec.ForMessage(42, global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping.Types.Option.Parser);
            private readonly pbc::RepeatedField<global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping.Types.Option> options_ = new pbc::RepeatedField<global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping.Types.Option>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping.Types.Option> Options {
              get { return options_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as FunctionMapping);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(FunctionMapping other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(FunctionId, other.FunctionId)) return false;
              if (!object.Equals(ExtensionId, other.ExtensionId)) return false;
              if (Name != other.Name) return false;
              if (Index != other.Index) return false;
              if(!options_.Equals(other.options_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (functionId_ != null) hash ^= FunctionId.GetHashCode();
              if (extensionId_ != null) hash ^= ExtensionId.GetHashCode();
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (Index != 0) hash ^= Index.GetHashCode();
              hash ^= options_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (functionId_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(FunctionId);
              }
              if (extensionId_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(ExtensionId);
              }
              if (Name.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Name);
              }
              if (Index != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(Index);
              }
              options_.WriteTo(output, _repeated_options_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (functionId_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(FunctionId);
              }
              if (extensionId_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(ExtensionId);
              }
              if (Name.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Name);
              }
              if (Index != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(Index);
              }
              options_.WriteTo(ref output, _repeated_options_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (functionId_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FunctionId);
              }
              if (extensionId_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtensionId);
              }
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (Index != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
              }
              size += options_.CalculateSize(_repeated_options_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(FunctionMapping other) {
              if (other == null) {
                return;
              }
              if (other.functionId_ != null) {
                if (functionId_ == null) {
                  FunctionId = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                }
                FunctionId.MergeFrom(other.FunctionId);
              }
              if (other.extensionId_ != null) {
                if (extensionId_ == null) {
                  ExtensionId = new global::Substrait.Protobuf.Extensions.Types.ExtensionId();
                }
                ExtensionId.MergeFrom(other.ExtensionId);
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.Index != 0) {
                Index = other.Index;
              }
              options_.Add(other.options_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (functionId_ == null) {
                      FunctionId = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                    }
                    input.ReadMessage(FunctionId);
                    break;
                  }
                  case 18: {
                    if (extensionId_ == null) {
                      ExtensionId = new global::Substrait.Protobuf.Extensions.Types.ExtensionId();
                    }
                    input.ReadMessage(ExtensionId);
                    break;
                  }
                  case 26: {
                    Name = input.ReadString();
                    break;
                  }
                  case 32: {
                    Index = input.ReadUInt32();
                    break;
                  }
                  case 42: {
                    options_.AddEntriesFrom(input, _repeated_options_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (functionId_ == null) {
                      FunctionId = new global::Substrait.Protobuf.Extensions.Types.FunctionId();
                    }
                    input.ReadMessage(FunctionId);
                    break;
                  }
                  case 18: {
                    if (extensionId_ == null) {
                      ExtensionId = new global::Substrait.Protobuf.Extensions.Types.ExtensionId();
                    }
                    input.ReadMessage(ExtensionId);
                    break;
                  }
                  case 26: {
                    Name = input.ReadString();
                    break;
                  }
                  case 32: {
                    Index = input.ReadUInt32();
                    break;
                  }
                  case 42: {
                    options_.AddEntriesFrom(ref input, _repeated_options_codec);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the FunctionMapping message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class Option : pb::IMessage<Option>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<Option> _parser = new pb::MessageParser<Option>(() => new Option());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Option> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Substrait.Protobuf.Extensions.Types.Mapping.Types.FunctionMapping.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Option() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Option(Option other) : this() {
                  key_ = other.key_;
                  value_ = other.value_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Option Clone() {
                  return new Option(this);
                }

                /// <summary>Field number for the "key" field.</summary>
                public const int KeyFieldNumber = 1;
                private string key_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Key {
                  get { return key_; }
                  set {
                    key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "value" field.</summary>
                public const int ValueFieldNumber = 2;
                private string value_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Value {
                  get { return value_; }
                  set {
                    value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Option);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Option other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Key != other.Key) return false;
                  if (Value != other.Value) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Key.Length != 0) hash ^= Key.GetHashCode();
                  if (Value.Length != 0) hash ^= Value.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (Key.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Key);
                  }
                  if (Value.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Value);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (Key.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Key);
                  }
                  if (Value.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Value);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Key.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
                  }
                  if (Value.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Option other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Key.Length != 0) {
                    Key = other.Key;
                  }
                  if (other.Value.Length != 0) {
                    Value = other.Value;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Key = input.ReadString();
                        break;
                      }
                      case 18: {
                        Value = input.ReadString();
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        Key = input.ReadString();
                        break;
                      }
                      case 18: {
                        Value = input.ReadString();
                        break;
                      }
                    }
                  }
                }
                #endif

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class ExtensionId : pb::IMessage<ExtensionId>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ExtensionId> _parser = new pb::MessageParser<ExtensionId>(() => new ExtensionId());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExtensionId> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Extensions.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExtensionId() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExtensionId(ExtensionId other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExtensionId Clone() {
          return new ExtensionId(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ExtensionId);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ExtensionId other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ExtensionId other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class FunctionId : pb::IMessage<FunctionId>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FunctionId> _parser = new pb::MessageParser<FunctionId>(() => new FunctionId());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FunctionId> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Extensions.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FunctionId() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FunctionId(FunctionId other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FunctionId Clone() {
          return new FunctionId(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FunctionId);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FunctionId other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0UL) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FunctionId other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0UL) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class TypeId : pb::IMessage<TypeId>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TypeId> _parser = new pb::MessageParser<TypeId>(() => new TypeId());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TypeId> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Substrait.Protobuf.Extensions.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeId() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeId(TypeId other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeId Clone() {
          return new TypeId(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TypeId);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TypeId other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0UL) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TypeId other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0UL) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
